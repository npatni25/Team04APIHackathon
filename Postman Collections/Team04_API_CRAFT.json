{
	"info": {
		"_postman_id": "0236d80b-87af-455d-80e1-b189b61bb212",
		"name": "Dietician _API_Team4",
		"description": "Complete automated flow with Admin login, Dietician creation/login, Patient creation, Reports upload, and test cases.",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Generate Dietician token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26bb88c0-5e32-4e0e-8eec-efebbe9a1a1c",
								"exec": [
									"var json = pm.response.json();",
									"",
									"pm.collectionVariables.set('dieticianEmail', json.Email);",
									"pm.collectionVariables.set('dieticianPassword', json.loginPassword);",
									"pm.collectionVariables.set('dieticianId', json.id);",
									"",
									"console.log('Dietician created. Email: ' + json.Email + ', Password: ' + json.loginPassword + ', dieticianId: ' + json.id);",
									"",
									"// ✅ Status code check",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8f74a299-23dc-4b78-b6dc-8cf921c3c9ec",
								"exec": [
									"// Generate random 6-character string\r",
									"let randomStr = Math.random().toString(36).substring(2, 8).toLowerCase();\r",
									"\r",
									"// Generate random email\r",
									"let email = `user_${randomStr}@mail.com`;\r",
									"pm.environment.set(\"Email1\", email);\r",
									"\r",
									"// Generate random 10-digit phone number starting with 9, 8, or 7\r",
									"let phone = `${Math.floor(Math.random() * 3) + 7}${Math.floor(100000000 + Math.random() * 900000000)}`;\r",
									"pm.environment.set(\"ContactNumber1\", phone);\r",
									"\r",
									"// Generate random DOB between age 18 and 60\r",
									"function randomDOB() {\r",
									"    let today = new Date();\r",
									"    let minAge = 18;\r",
									"    let maxAge = 60;\r",
									"\r",
									"    let minDOB = new Date(today.getFullYear() - maxAge, 0, 1);\r",
									"    let maxDOB = new Date(today.getFullYear() - minAge, 11, 31);\r",
									"\r",
									"    let dob = new Date(minDOB.getTime() + Math.random() * (maxDOB.getTime() - minDOB.getTime()));\r",
									"    return dob.toISOString().split('T')[0]; // Format: YYYY-MM-DD\r",
									"}\r",
									"\r",
									"pm.environment.set(\"DateOfBirth1\", randomDOB());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9e33354c-263c-4a1b-89d3-f4d221ac253d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{adminToken}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ContactNumber\": \"{{ContactNumber1}}\",\n  \"DateOfBirth\": \"{{DateOfBirth1}}\",\n  \"Education\": \"MBBS\",\n  \"Email\": \"{{Email1}}\",\n  \"Firstname\": \"John\",\n  \"HospitalCity\": \"CityName\",\n  \"HospitalName\": \"HospitalName\",\n  \"HospitalPincode\": \"123456\",\n  \"HospitalStreet\": \"StreetName\",\n  \"Lastname\": \"Doe\"\n}"
						},
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician"
					},
					"response": []
				},
				{
					"name": "Dietician Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7590bdce-6b1c-4e95-9bb0-2aed7a49fde9",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let json = pm.response.json();",
									"pm.collectionVariables.set(\"dieticianToken\", json.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7103e556-d12f-4f4e-af17-570653ab1b4f",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e557f78c-37ad-41fd-8988-f77e061804fa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{adminToken}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userLoginEmail\": \"{{dieticianEmail}}\",\n  \"password\": \"{{dieticianPassword}}\"\n}\n\n"
						},
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login"
					},
					"response": []
				}
			],
			"id": "d9ade4ce-f9e9-4847-a481-c0d2dd1ca4ec"
		},
		{
			"name": "Dietician",
			"item": [
				{
					"name": "CreateDietician",
					"item": [
						{
							"name": "CreateDietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b330486b-6618-4a11-ac4e-80628727f726",
										"exec": [
											"// Read scenario name from the current iteration data",
											"const testCaseId = pm.iterationData.get(\"TestCase\");",
											"const testCaseName = pm.iterationData.get(\"Name\");",
											"console.log(`Running Test Case: ${testCaseId} - ${testCaseName}`);",
											"pm.test(`Executed: ${testCaseId} - ${testCaseName}`, function () {",
											"    pm.expect(testCaseId).to.not.be.undefined;",
											"});",
											"",
											"//Check if status code is as expected",
											"pm.test(\"Status code is as expected\", function () {",
											"    const expectedCode = parseInt(pm.iterationData.get(\"statusCode\"));",
											"    pm.response.to.have.status(expectedCode);",
											"});",
											"",
											"// Check that 'id' exists and is not null",
											"pm.test(\"Response has auto-generated ID\", function () {",
											"    const jsonData = pm.response.json(); ",
											"    pm.expect(jsonData).to.have.property('id');",
											"    pm.expect(jsonData.id).to.not.be.null;",
											"    pm.expect(jsonData.id).to.not.be.undefined;",
											"    pm.expect(jsonData.id).to.satisfy(id => typeof id === 'string' || typeof id === 'number');",
											"    console.log(\"Generated ID:\", jsonData.id);",
											"});",
											"",
											"pm.test(\"Response has auto-generated Password\", function () {",
											"    const jsonData = pm.response.json(); ",
											"    pm.expect(jsonData).to.have.property('loginPassword');",
											"    pm.expect(jsonData.loginPassword).to.not.be.null;",
											"    pm.expect(jsonData.loginPassword).to.not.be.undefined;",
											"    //pm.expect(jsonData.loginPassword).to.satisfy(loginPassword => typeof loginPassword === 'string' || typeof loginPassword === 'number');",
											"    console.log(\"Generated Password:\", jsonData.loginPassword);",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f643f754-9a81-4b40-a4c8-51056ba92641",
										"exec": [
											"const reqName = pm.iterationData.get(\"requestName\");",
											"const testCase = pm.iterationData.get(\"TestCase\");",
											"console.log(\"requestNamelog:\" + reqName);",
											"console.log(\"testCaselog:\" + testCase);",
											"",
											"",
											"",
											"if (testCase !== \"TC14\" ) {",
											"    console.log(`Skipping iteration with name: ${testCase}`);",
											"    pm.execution.setNextRequest(\"Skip\");",
											"    //pm.execution.setNextRequest(null);",
											"    throw new Error(\"Skipping this request for current iteration since its not a CreateDietician test\");",
											"}",
											"",
											"const currentRequestName = pm.info.requestName;",
											"const dataRequestName = pm.iterationData.get(\"requestName\");",
											"",
											"// If the current request doesn't match the row's target request, skip it.",
											"if (currentRequestName !== dataRequestName) {",
											"    console.log(`Skipping: ${currentRequestName} is not meant for this data row (${dataRequestName})`);",
											"    pm.execution.setNextRequest(null); // Skip just this request, not the whole collection",
											"}",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c6c8fae1-7313-434e-881f-5777daaee255",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{adminToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer{{adminToken1}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Education\": \"{{Education}}\",\n  \"Email\": \"{{Email}}\",\n  \"Firstname\": \"{{Firstname}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"Lastname\": \"{{Lastname}}\"\n}"
								},
								"url": "{{base_url}}/dietician"
							},
							"response": []
						},
						{
							"name": "CreateDieticianAll",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8784b4c1-ea82-4c25-a307-3f5306a8c97b",
										"exec": [
											"const reqName = pm.iterationData.get(\"requestName\");",
											"",
											"if (reqName !== \"CreateDietician\") {",
											"    console.log(`Skipping iteration with name: ${reqName}`);",
											"    Postman.setNextRequest(null)",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "409ee34c-efd9-49e4-a4fc-d07ca65fffef",
										"exec": [
											"// Read scenario name from the current iteration data",
											"const testCaseId = pm.iterationData.get(\"TestCase\");",
											"const testCaseName = pm.iterationData.get(\"Name\");",
											"console.log(`Running Test Case: ${testCaseId} - ${testCaseName}`);",
											"pm.test(`Executed: ${testCaseId} - ${testCaseName}`, function () {",
											"    pm.expect(testCaseId).to.not.be.undefined;",
											"});",
											"",
											"//Check status code and error is as expected",
											"pm.test(\"Status code / error message are as expected\", function () {",
											"    try {",
											"        const expectedCode = parseInt(pm.iterationData.get(\"statusCode\"));",
											"        const expectedError = pm.iterationData.get(\"expectedErrorMessage\");",
											"        if (isNaN(expectedCode)) {",
											"            throw new Error(\"Expected status code is not a valid number.\");",
											"        }",
											"        pm.expect(pm.response.code).to.eql(expectedCode);",
											"        console.log(`Status code matched: ${expectedCode}`);",
											"        const responseBody = pm.response.json();",
											"",
											"        if (expectedError) {",
											"            const actualError = responseBody.error || responseBody.message || responseBody.detail || JSON.stringify(responseBody);",
											"            pm.expect(actualError).to.include(expectedError);",
											"            console.log(`Error message matched: ${expectedError}`);",
											"        }",
											"",
											"    } catch (err) {",
											"        console.error(`❌ Test failed: ${err.message}`);",
											"        console.error(`Response Status: ${pm.response.code}`);",
											"        console.error(`Expected Status: ${pm.iterationData.get(\"statusCode\")}`);",
											"        console.error(`Expected Error: ${pm.iterationData.get(\"expectedErrorMessage\")}`);",
											"        console.error(`Actual Response: ${pm.response.text()}`);",
											"        throw err; ",
											"    }",
											"});",
											"",
											"",
											"",
											"",
											"// pm.test(\"Status code is as expected\", function () {",
											"//     const expectedCode = parseInt(pm.iterationData.get(\"statusCode\"));",
											"//     pm.response.to.have.status(expectedCode);",
											"// });",
											"",
											"",
											"// pm.test(\"Status text is as expected\", function () {",
											"//     const expectedText = pm.iterationData.get(\"statusText\");",
											"//     pm.expect(pm.response.status).to.eql(expectedText);",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "1fe7f53d-61b3-436f-8a2b-df69940319f7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{adminToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Education\": \"{{Education}}\",\n  \"Email\": \"{{Email}}\",\n  \"Firstname\": \"{{Firstname}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"Lastname\": \"{{Lastname}}\"\n}"
								},
								"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician"
							},
							"response": []
						},
						{
							"name": "AuthCheck_NonAdminCheck",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8784b4c1-ea82-4c25-a307-3f5306a8c97b",
										"exec": [
											"//const reqName = pm.iterationData.get(\"requestName\");",
											"const testCase = pm.iterationData.get(\"TestCase\");",
											"",
											"if (testCase !== \"TC23\" ) {",
											"    console.log(`Skipping iteration with name: ${testCase}`);",
											"    Postman.setNextRequest(null)",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "409ee34c-efd9-49e4-a4fc-d07ca65fffef",
										"exec": [
											"// Read scenario name from the current iteration data",
											"const testCaseId = pm.iterationData.get(\"TestCase\");",
											"const testCaseName = pm.iterationData.get(\"Name\");",
											"console.log(`Running Test Case: ${testCaseId} - ${testCaseName}`);",
											"pm.test(`Executed: ${testCaseId} - ${testCaseName}`, function () {",
											"    pm.expect(testCaseId).to.not.be.undefined;",
											"});",
											"",
											"//Check status code and error is as expected",
											"pm.test(\"Status code / error message are as expected\", function () {",
											"    try {",
											"        const expectedCode = parseInt(pm.iterationData.get(\"statusCode\"));",
											"        const expectedError = pm.iterationData.get(\"expectedErrorMessage\");",
											"        if (isNaN(expectedCode)) {",
											"            throw new Error(\"Expected status code is not a valid number.\");",
											"        }",
											"        pm.expect(pm.response.code).to.eql(expectedCode);",
											"        console.log(`Status code matched: ${expectedCode}`);",
											"        const responseBody = pm.response.json();",
											"",
											"        if (expectedError) {",
											"            const actualError = responseBody.error || responseBody.message || responseBody.detail || JSON.stringify(responseBody);",
											"            pm.expect(actualError).to.include(expectedError);",
											"            console.log(`Error message matched: ${expectedError}`);",
											"        }",
											"",
											"    } catch (err) {",
											"        console.error(`❌ Test failed: ${err.message}`);",
											"        console.error(`Response Status: ${pm.response.code}`);",
											"        console.error(`Expected Status: ${pm.iterationData.get(\"statusCode\")}`);",
											"        console.error(`Expected Error: ${pm.iterationData.get(\"expectedErrorMessage\")}`);",
											"        console.error(`Actual Response: ${pm.response.text()}`);",
											"        throw err; ",
											"    }",
											"});",
											"",
											"",
											"",
											"// pm.test(\"Status code is as expected\", function () {",
											"//     const expectedCode = parseInt(pm.iterationData.get(\"statusCode\"));",
											"//     pm.response.to.have.status(expectedCode);",
											"// });",
											"",
											"",
											"// pm.test(\"Status text is as expected\", function () {",
											"//     const expectedText = pm.iterationData.get(\"statusText\");",
											"//     pm.expect(pm.response.status).to.eql(expectedText);",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6b9c2645-d142-4a37-a36a-c33d06bdf9d6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{adminToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Education\": \"{{Education}}\",\n  \"Email\": \"{{Email}}\",\n  \"Firstname\": \"{{Firstname}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"Lastname\": \"{{Lastname}}\"\n}"
								},
								"url": "{{base_url}}/dietician"
							},
							"response": []
						}
					],
					"id": "3488c536-7744-413b-a8aa-9394b0dcb367"
				},
				{
					"name": "UpdateDietician",
					"item": [
						{
							"name": "fortest Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23bf1c95-4d63-4cb8-bf52-114f9ae5daaa",
										"exec": [
											"pm.test(\"Status code / error message are as expected\", function () {",
											"    try {",
											"        const expectedCode = parseInt(pm.iterationData.get(\"statusCode\"));",
											"        const expectedError = pm.iterationData.get(\"expectedErrorMessage\");",
											"        if (isNaN(expectedCode)) {",
											"            throw new Error(\"Expected status code is not a valid number.\");",
											"        }",
											"        pm.expect(pm.response.code).to.eql(expectedCode);",
											"        console.log(`Status code matched: ${expectedCode}`);",
											"        const responseBody = pm.response.json();",
											"",
											"        if (expectedError) {",
											"            const actualError = responseBody.error || responseBody.message || responseBody.detail || JSON.stringify(responseBody);",
											"            pm.expect(actualError).to.include(expectedError);",
											"            console.log(`Error message matched: ${expectedError}`);",
											"        }",
											"",
											"    } catch (err) {",
											"        console.error(`❌ Test failed: ${err.message}`);",
											"        console.error(`Response Status: ${pm.response.code}`);",
											"        console.error(`Expected Status: ${pm.iterationData.get(\"statusCode\")}`);",
											"        console.error(`Expected Error: ${pm.iterationData.get(\"expectedErrorMessage\")}`);",
											"        console.error(`Actual Response: ${pm.response.text()}`);",
											"        throw err; ",
											"    }",
											"});",
											"",
											"",
											"",
											"// pm.test(\"Status code is as expected\", function () {",
											"//     const expectedCode = parseInt(pm.iterationData.get(\"statusCode\"));",
											"//     pm.response.to.have.status(expectedCode);",
											"// });",
											"",
											"",
											"// pm.test(\"Status text is as expected\", function () {",
											"//     const expectedText = pm.iterationData.get(\"statusText\");",
											"//     pm.expect(pm.response.status).to.eql(expectedText);",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "55932594-7476-4a6f-bb17-4d6029195d48",
										"exec": [
											"//const reqName = pm.iterationData.get(\"requestName\");",
											"const testCase = pm.iterationData.get(\"TestCase\");",
											"",
											"if (testCase !== \"TC46\" ) {",
											"    console.log(`Skipping iteration with name: ${testCase}`);",
											"    Postman.setNextRequest(null)",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "4d05b2ed-4640-4be0-bca2-cb38c97a6c37",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{adminToken}}"
									}
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer{{adminToken1}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Education\": \"{{Education}}\",\n  \"Email\": \"{{Email}}\",\n  \"Firstname\": \"{{Firstname}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"Lastname\": \"{{Lastname}}\"\n}"
								},
								"url": "{{base_url}}{{endpoint}}"
							},
							"response": []
						},
						{
							"name": "UpdateDietician_PositiveandNegativeSceanrios",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c90a8314-088d-4915-a50b-6d18fe006ca4",
										"exec": [
											"// Read scenario name from the current iteration data",
											"const testCaseId = pm.iterationData.get(\"TestCase\");",
											"const testCaseName = pm.iterationData.get(\"Name\");",
											"console.log(`Running Test Case: ${testCaseId} - ${testCaseName}`);",
											"pm.test(`Executed: ${testCaseId} - ${testCaseName}`, function () {",
											"    pm.expect(testCaseId).to.not.be.undefined;",
											"});",
											"",
											"//Verify status code and or error",
											"pm.test(\"Status code and/or error message are as expected\", function () {",
											"    try {",
											"        const expectedCode = parseInt(pm.iterationData.get(\"statusCode\"));",
											"        const expectedError = pm.iterationData.get(\"expectedErrorMessage\");",
											"        if (isNaN(expectedCode)) {",
											"            throw new Error(\"Expected status code is not a valid number.\");",
											"        }",
											"        pm.expect(pm.response.code).to.eql(expectedCode);",
											"        console.log(`Status code matched: ${expectedCode}`);",
											"        const responseBody = pm.response.json();",
											"",
											"        if (expectedError) {",
											"            const actualError = responseBody.error || responseBody.message || responseBody.detail || JSON.stringify(responseBody);",
											"            pm.expect(actualError).to.include(expectedError);",
											"            console.log(`Error message matched: ${expectedError}`);",
											"        }",
											"",
											"    } catch (err) {",
											"        console.error(`❌ Test failed: ${err.message}`);",
											"        console.error(`Response Status: ${pm.response.code}`);",
											"        console.error(`Expected Status: ${pm.iterationData.get(\"statusCode\")}`);",
											"        console.error(`Expected Error: ${pm.iterationData.get(\"expectedErrorMessage\")}`);",
											"        console.error(`Actual Response: ${pm.response.text()}`);",
											"        throw err; ",
											"    }",
											"});",
											"",
											"//verify if respose body displayed data as expected..",
											"// const keys = [",
											"//   \"Firstname\", \"Lastname\", \"DateOfBirth\", \"Email\", ",
											"//   \"ContactNumber\", \"Education\", \"HospitalName\", ",
											"//   \"HospitalCity\", \"HospitalStreet\", \"HospitalPincode\"",
											"// ];",
											"// let response = pm.response.json();",
											"// pm.test(\"All fields match expected values from data file\", function () {",
											"//     keys.forEach(key => {",
											"//         const expected = pm.iterationData.get(key);",
											"//         pm.expect(response[key]).to.eql(expected, `Mismatch in ${key}`);",
											"//     });",
											"// });",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "90161c4c-b04e-45ca-b1e4-497468207854",
										"exec": [
											"const reqName = pm.iterationData.get(\"requestName\");",
											"",
											"if (reqName !== \"UpdateDietician\") {",
											"    console.log(`Skipping iteration with name: ${reqName}`);",
											"    Postman.setNextRequest(null)",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "3fdd0543-18f8-4497-acb2-f2a4a011c424",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{adminToken}}"
									}
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Education\": \"{{Education}}\",\n  \"Email\": \"{{Email}}\",\n  \"Firstname\": \"{{Firstname}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"Lastname\": \"{{Lastname}}\"\n}"
								},
								"url": "{{base_url}}{{endpoint}}"
							},
							"response": []
						}
					],
					"id": "f6cdeb72-3f88-4616-8c94-2ddc181dae67"
				},
				{
					"name": "RetrieveDietician",
					"item": [
						{
							"name": "GetDieticianUsingDieticianRole",
							"item": [
								{
									"name": "Get Dietician using Dietician Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ffccab65-d437-4f28-9efc-8ba595523c7c",
												"exec": [
													"const reqname = pm.iterationData.get(\"Reqname\");\r",
													"const myRequestName = \"Get Dietician using Dietician Token\"; \r",
													"\r",
													"pm.variables.set(\"shouldRun\", reqname === myRequestName); // Mark whether this request should execute\r",
													"\r",
													"let method = pm.iterationData.get(\"method\"); // Set the HTTP method from data file\r",
													"if (method) pm.request.method = method.toUpperCase();\r",
													"\r",
													"\r",
													"let rawEndpoint = pm.iterationData.get(\"endpoint\") || \"/\"; // Replace collection variables inside the endpoint string\r",
													"let substitutedEndpoint = pm.variables.replaceIn(rawEndpoint);\r",
													"\r",
													"substitutedEndpoint = substitutedEndpoint.replace(/^\\/+/, \"\");\r",
													"pm.variables.set(\"dynamicEndpoint\", \"/\" + substitutedEndpoint);\r",
													"\r",
													"\r",
													"let authType = pm.iterationData.get(\"authType\") || \"No Auth\"; // Auth token logic using collection variables\r",
													"\r",
													"if (authType === \"Dietician Token\") {\r",
													"    pm.request.headers.upsert({\r",
													"        key: \"Authorization\",\r",
													"        value: \"Bearer \" + pm.collectionVariables.get(\"dieticianToken\")\r",
													"    });\r",
													"} else if (authType === \"Admin Token\") {\r",
													"    console.log(\"Updating the Admin token ---- \" + pm.collectionVariables.get(\"adminToken\"));\r",
													"    pm.request.headers.upsert({\r",
													"        key: \"Authorization\",\r",
													"        value: \"Bearer \" + pm.collectionVariables.get(\"adminToken\")\r",
													"    });\r",
													"} else if (authType === \"Expired Token\") {\r",
													"    pm.request.headers.upsert({\r",
													"        key: \"Authorization\",\r",
													"        value: \"Bearer \" + pm.collectionVariables.get(\"expiredToken\")\r",
													"    });\r",
													"} else if (authType === \"No Auth\") {\r",
													"    pm.request.headers.remove(\"Authorization\");\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "beb715ce-d4df-4620-860a-8bfe72a13e1f",
												"exec": [
													"const expectedStatus = parseInt(pm.iterationData.get(\"statusCode\"));\r",
													"const expectedStatusText = pm.iterationData.get(\"statusText\");\r",
													"\r",
													"pm.test(\" Status Code matches\", function () {\r",
													"    pm.response.to.have.status(expectedStatus);\r",
													"});\r",
													"\r",
													"pm.test(\" Status Text matches\", function () {\r",
													"    pm.expect(pm.response.status).to.eql(expectedStatusText);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "dac3d6f3-e376-45ac-8672-57f9dafe3037",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{adminToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "{{base_url}}{{dynamicEndpoint}}"
									},
									"response": []
								}
							],
							"id": "0a84815d-0a1f-47a8-98bc-f512bc207d3d"
						},
						{
							"name": "GetDieticianUsingAdminRole",
							"item": [
								{
									"name": "Get Dietician using Admin Role",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ffccab65-d437-4f28-9efc-8ba595523c7c",
												"exec": [
													"const reqname = pm.iterationData.get(\"Reqname\");\r",
													"const myRequestName = \"Get Dietician by id\"; \r",
													"\r",
													"pm.variables.set(\"shouldRun\", reqname === myRequestName); // Mark whether this request should execute\r",
													"\r",
													"let method = pm.iterationData.get(\"method\"); // Set the HTTP method from data file\r",
													"if (method) pm.request.method = method.toUpperCase();\r",
													"\r",
													"\r",
													"let rawEndpoint = pm.iterationData.get(\"endpoint\") || \"/\"; // Replace collection variables inside the endpoint string\r",
													"let substitutedEndpoint = pm.variables.replaceIn(rawEndpoint);\r",
													"\r",
													"substitutedEndpoint = substitutedEndpoint.replace(/^\\/+/, \"\");\r",
													"pm.variables.set(\"dynamicEndpoint\", \"/\" + substitutedEndpoint);\r",
													"\r",
													"\r",
													"let authType = pm.iterationData.get(\"authType\") || \"No Auth\"; // Auth token logic using collection variables\r",
													"\r",
													"if (authType === \"Dietician Token\") {\r",
													"    pm.request.headers.upsert({\r",
													"        key: \"Authorization\",\r",
													"        value: \"Bearer \" + pm.collectionVariables.get(\"dieticianToken\")\r",
													"    });\r",
													"} else if (authType === \"Admin Token\") {\r",
													"    console.log(\"Updating the Admin token ---- \" + pm.collectionVariables.get(\"adminToken\"));\r",
													"    pm.request.headers.upsert({\r",
													"        key: \"Authorization\",\r",
													"        value: \"Bearer \" + pm.collectionVariables.get(\"adminToken\")\r",
													"    });\r",
													"} else if (authType === \"Expired Token\") {\r",
													"    pm.request.headers.upsert({\r",
													"        key: \"Authorization\",\r",
													"        value: \"Bearer \" + pm.collectionVariables.get(\"expiredToken\")\r",
													"    });\r",
													"} else if (authType === \"No Auth\") {\r",
													"    pm.request.headers.remove(\"Authorization\");\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "beb715ce-d4df-4620-860a-8bfe72a13e1f",
												"exec": [
													"const expectedStatus = parseInt(pm.iterationData.get(\"statusCode\"));\r",
													"const expectedStatusText = pm.iterationData.get(\"statusText\");\r",
													"\r",
													"pm.test(\" Status Code matches\", function () {\r",
													"    pm.response.to.have.status(expectedStatus);\r",
													"});\r",
													"\r",
													"pm.test(\" Status Text matches\", function () {\r",
													"    pm.expect(pm.response.status).to.eql(expectedStatusText);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "d7433045-9cc4-42a4-a404-ae6c26aefa36",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{adminToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "{{base_url}}{{dynamicEndpoint}}"
									},
									"response": []
								}
							],
							"id": "fdf1a354-a585-4ece-9818-f96ed22e5dbb"
						},
						{
							"name": "GetAllDieticianUsingDieticianRole",
							"item": [
								{
									"name": "GET_AllDieticians",
									"id": "d4054abf-7128-497f-b786-2be419c5be0a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{dieticianToken}}"
											}
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician"
									},
									"response": []
								}
							],
							"id": "f8a7f2cc-5bd0-49a6-bb50-1c18d2e63428"
						},
						{
							"name": "Retrieve All Dietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f045ba4c-3e56-4b48-b823-790251022815",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status Text is OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "51420741-b602-4a18-84a4-877cb9424940",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{adminToken1}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{base_url}}/dietician"
							},
							"response": []
						},
						{
							"name": "Retireve All Dietician with No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "824ebe12-568c-416f-b2ba-389ea6b101f8",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "cd1016b4-3733-4208-8735-722dcaa7ee30",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{adminToken1}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{base_url}}/dietician"
							},
							"response": []
						},
						{
							"name": "New Request",
							"id": "8904ac10-5f51-46b6-9f11-8e35309dd00e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{adminToken1}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Education\": \"{{Education}}\",\n  \"Email\": \"{{Email}}\",\n  \"Firstname\": \"{{Firstname}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"Lastname\": \"{{Lastname}}\"\n}"
								},
								"url": "{{base_url}}/dietician"
							},
							"response": []
						}
					],
					"id": "a1129c92-4d94-48fc-b3b5-fb9103565a25"
				}
			],
			"id": "fd60e995-46dd-4476-8e20-ce2f18ddcb65"
		},
		{
			"name": "Patient Module",
			"item": [
				{
					"name": "Create Patient_bs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e4147433-9539-46cf-8387-0bb568b31842",
								"exec": [
									"const reqname = pm.iterationData.get(\"Reqname\");\r",
									"const myRequestName = \"Create New Patient\"; \r",
									"\r",
									"\r",
									"pm.variables.set(\"shouldRun\", reqname === myRequestName); // Mark whether this request should execute\r",
									"\r",
									"\r",
									"let method = pm.iterationData.get(\"method\"); // Set the HTTP method from data file\r",
									"if (method) pm.request.method = method.toUpperCase();\r",
									"\r",
									"\r",
									"let rawEndpoint = pm.iterationData.get(\"endpoint\") || \"/\"; // Replace collection variables inside the endpoint string\r",
									"\r",
									"\r",
									"let authType = pm.iterationData.get(\"authType\") || \"No Auth\"; // Auth token logic using collection variables\r",
									"\r",
									"if (authType === \"Dietician Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.collectionVariables.get(\"dieticianToken\")\r",
									"    });\r",
									"} else if (authType === \"Admin Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.collectionVariables.get(\"adminToken\")\r",
									"    });\r",
									"} else if (authType === \"Expired Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.collectionVariables.get(\"expiredToken\")\r",
									"    });\r",
									"} else if (authType === \"No Auth\") {\r",
									"    pm.request.headers.remove(\"Authorization\");\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// let patientId = pm.iterationData.get(\"patientId\");\r",
									"// pm.variables.set(\"patientId\", patientId);\r",
									"    // pm.environment.set('patientId', json.patientId);\r",
									"\r",
									"\r",
									"\r",
									"// //  Status code check\r",
									"// pm.test(\"Status code is 201\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"// // Generate random Contact Number starting with 2\r",
									"// const contactNumber = \"2\" + Math.floor(100000000 + Math.random() * 900000000);\r",
									"// pm.environment.set(\"PatientContactNumber\", contactNumber);\r",
									"\r",
									"// // Generate unique email\r",
									"// const emailPrefix = \"jane\" + Math.floor(Math.random() * 10000);\r",
									"// pm.environment.set(\"PatientEmail\", `${emailPrefix}@example.com`);\r",
									"\r",
									"// // Generate random DOB between 1985 and 2002\r",
									"// function getRandomDOB() {\r",
									"//     const start = new Date(1985, 0, 1);\r",
									"//     const end = new Date(2002, 11, 31);\r",
									"//     const dob = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"//     return dob.toISOString().split('T')[0];\r",
									"// }\r",
									"// pm.environment.set(\"PatientDOB\", getRandomDOB());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "209ee69b-8ab9-4038-9631-0caa7d2659a8",
								"exec": [
									"// Assuming patientId comes in response",
									"var json = pm.response.json();",
									"",
									"if (json.patientId) {",
									"    pm.collectionVariables.set('patientId', json.patientId);",
									"    console.log('Patient created with ID: ' + json.patientId);",
									"} else {",
									"    console.log('Patient ID not found in response');",
									"}",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"",
									"",
									"",
									"// // Assuming patientId comes in response",
									"// var json = pm.response.json();",
									"// if (json.patientId) {",
									"//     pm.environment.set('patientId', json.patientId);",
									"//     console.log('Patient created with ID: ' + json.patientId);",
									"// } else {",
									"//     console.log('Patient ID not found in response');",
									"// }",
									"// pm.test(\"Status code is 200\", function () {",
									"//     pm.response.to.have.status(200);",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "5ba4a19f-dd11-4d75-a862-7f7173e82aed",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{dieticianToken}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{dieticianToken}}"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							},
							{
								"key": "accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "text",
									"value": ""
								},
								{
									"key": "patientInfo",
									"value": "{\"FirstName\": \"{{FirstName}}\",\"LastName\": \"{{LastName}}\",\"ContactNumber\": \"{{ContactNumber}}\",\"Email\": \"{{Email}}\",\"Allergy\": \"{{Allergy}}\",\"FoodPreference\": \"{{FoodPreference}}\",\"CuisineCategory\": \"{{CuisineCategory}}\",\"DateOfBirth\": \"{{DateOfBirth}}\" }",
									"type": "text",
									"uuid": "9b8c3f63-6c34-4ac8-b6ab-a7e8c340583d"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}{{endpoint}}",
							"host": [
								"{{base_url}}{{endpoint}}"
							],
							"query": [
								{
									"key": "patientInfo",
									"value": "%7B \"FirstName\": \"{{FirstName}}\",\"LastName\": \"{{LastName}}\",\"ContactNumber\": \"{{ContactNumber}}\",\"Email\": \"{{Email}}\",\"Allergy\": \"{{Allergy}}\",\"FoodPreference\": \"{{FoodPreference}}\",\"CuisineCategory\": \"{{CuisineCategory}}\",\"DateOfBirth\": \"{{DateOfBirth}}\" %7D",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update_Ptient_bs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a663803c-d372-43ee-820e-1e727a62382c",
								"exec": [
									"let patientId = pm.iterationData.get(\"patientId\");\r",
									"pm.variables.set(\"patientId\", patientId);\r",
									"\r",
									"\r",
									"//  Status code check\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f1b6eaba-27de-44bd-9973-07f53366d40b",
								"exec": [
									"const reqname = pm.iterationData.get(\"Reqname\");\r",
									"const myRequestName = \"UpdatePatientByIdDiatecian\"; \r",
									"\r",
									"\r",
									"pm.variables.set(\"shouldRun\", reqname === myRequestName); // Mark whether this request should execute\r",
									"\r",
									"\r",
									"let method = pm.iterationData.get(\"method\"); // Set the HTTP method from data file\r",
									"if (method) pm.request.method = method.toUpperCase();\r",
									"\r",
									"\r",
									"let rawEndpoint = pm.iterationData.get(\"endpoint\") || \"/\"; // Replace collection variables inside the endpoint string\r",
									"let substitutedEndpoint = pm.variables.replaceIn(rawEndpoint).trim();\r",
									"\r",
									"substitutedEndpoint = substitutedEndpoint.replace(/^\\/+/, \"\");\r",
									"pm.variables.set(\"dynamicEndpoint\", \"/\" + substitutedEndpoint);\r",
									"\r",
									"\r",
									"let authType = pm.iterationData.get(\"authType\") || \"No Auth\"; // Auth token logic using collection variables\r",
									"\r",
									"if (authType === \"Dietician Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.collectionVariables.get(\"dieticianToken\")\r",
									"    });\r",
									"} else if (authType === \"Admin Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.collectionVariables.get(\"adminToken\")\r",
									"    });\r",
									"} else if (authType === \"Expired Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.collectionVariables.get(\"expiredToken\")\r",
									"    });\r",
									"} else if (authType === \"No Auth\") {\r",
									"    pm.request.headers.remove(\"Authorization\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ce22aeab-3c35-4803-bb36-95b77888ec28",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{dieticianToken}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{\n\"FirstName\": \"{{FirstName}}\",\n\"LastName\": \"{{LastName}}\",\n\"ContactNumber\": \"{{ContactNumber}}\",\n\"Email\": \"{{Email}}\",\n\"Allergy\": \"{{Allergy}}\",\n\"FoodPreference\": \"{{FoodPreference}}\",\n\"CuisineCategory\": \"{{CuisineCategory}}\",\n\"DateOfBirth\": \"{{DateOfBirth}}\"\n}",
									"type": "text",
									"uuid": "b4a91f02-0f46-44bd-902b-1c717bc9c124"
								},
								{
									"key": "file",
									"value": "",
									"type": "text",
									"uuid": "6f3964fb-206d-480c-b3a4-6930a20bba50"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/{{dynamicEndpoint}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{dynamicEndpoint}}"
							],
							"query": [
								{
									"key": "patientId",
									"value": null,
									"type": "text",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add New Reports",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0321dd6-c1dc-41c0-a632-a8c71b3e5198",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "16614059-d800-4c62-861c-492c5e882686",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{dieticianToken}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{dieticianToken}}"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{\n  \"FirstName\": \"Jane\",\n  \"LastName\": \"Smith\",\n  \"ContactNumber\": \"9916543210\",\n  \"Email\": \"jane.smiiith319@example.com\",\n  \"Allergy\": \"NONE\",\n  \"FoodPreference\": \"Vegetarian\",\n  \"CuisineCategory\": \"Indian\",\n  \"DateOfBirth\": \"1993-05-20\"\n}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Users/chand/Downloads/Sample reports-20250523T164632Z-1-001 (1)/Sample reports/HyperThyroid_Report_final.pdf"
								},
								{
									"key": "vitals",
									"value": "{\n  \"Weight\": 70.0,\n  \"Height\": 170.0,\n  \"Temperature\": 36.5,\n  \"SP\": 120,\n  \"DP\": 80\n}",
									"type": "text"
								}
							]
						},
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient/newReports/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "Get Patient Morbidity Details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3ec4ea33-28bf-40c6-95ca-4686c6d2276f",
								"exec": [
									"const reqname = pm.iterationData.get(\"Reqname\");\r",
									"const myRequestName = \"Get Patient Morbidity Details\"; \r",
									"\r",
									"\r",
									"pm.variables.set(\"shouldRun\", reqname === myRequestName); // Mark whether this request should execute\r",
									"\r",
									"\r",
									"let method = pm.iterationData.get(\"method\"); // Set the HTTP method from data file\r",
									"if (method) pm.request.method = method.toUpperCase();\r",
									"\r",
									"\r",
									"let rawEndpoint = pm.iterationData.get(\"endpoint\") || \"/\"; // Replace collection variables inside the endpoint string\r",
									"let substitutedEndpoint = pm.variables.replaceIn(rawEndpoint).trim();\r",
									"\r",
									"substitutedEndpoint = substitutedEndpoint.replace(/^\\/+/, \"\");\r",
									"pm.variables.set(\"dynamicEndpoint\", \"/\" + substitutedEndpoint);\r",
									"\r",
									"\r",
									"let authType = pm.iterationData.get(\"authType\") || \"No Auth\"; // Auth token logic using collection variables\r",
									"\r",
									"if (authType === \"Dietician Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.collectionVariables.get(\"dieticianToken\")\r",
									"    });\r",
									"} else if (authType === \"Admin Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.collectionVariables.get(\"adminToken\")\r",
									"    });\r",
									"} else if (authType === \"Expired Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.collectionVariables.get(\"expiredToken\")\r",
									"    });\r",
									"} else if (authType === \"No Auth\") {\r",
									"    pm.request.headers.remove(\"Authorization\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8cdc748b-e3f2-497c-bfb6-33f6862142ed",
								"exec": [
									"const expectedStatus = parseInt(pm.iterationData.get(\"statusCode\"));",
									"const expectedStatusText = pm.iterationData.get(\"statusText\");",
									"",
									"pm.test(\" Status Code matches\", function () {",
									"    pm.response.to.have.status(expectedStatus);",
									"});",
									"",
									"pm.test(\" Status Text matches\", function () {",
									"    pm.expect(pm.response.status).to.eql(expectedStatusText);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "84e92011-f67c-4bee-a4ea-235d527e1d9d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{dieticianToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}{{dynamicEndpoint}}"
					},
					"response": []
				},
				{
					"name": "Retrieve Patient File by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "29956cf0-d89d-4ee8-a3ee-ef0f41cd5e3a",
								"exec": [
									"const reqname = pm.iterationData.get(\"Reqname\");\r",
									"const myRequestName = \"Retrieve Patient File by ID\"; \r",
									"\r",
									"\r",
									"pm.variables.set(\"shouldRun\", reqname === myRequestName); // Mark whether this request should execute\r",
									"\r",
									"\r",
									"let method = pm.iterationData.get(\"method\"); //Set the HTTP method from data file\r",
									"if (method) {\r",
									"    pm.request.method = method.toUpperCase();\r",
									"}\r",
									"\r",
									"\r",
									"let rawEndpoint = pm.iterationData.get(\"endpoint\") || \"/\"; //Get the endpoint and replace any {{placeholders}} from collection variables\r",
									"let substitutedEndpoint = pm.variables.replaceIn(rawEndpoint).trim();\r",
									"\r",
									"\r",
									"substitutedEndpoint = substitutedEndpoint.replace(/^\\/+/, \"\"); // Clean up leading slashes to avoid duplication\r",
									"\r",
									"\r",
									"pm.variables.set(\"dynamicEndpoint\", \"/\" + substitutedEndpoint); // Set as dynamicEndpoint variable\r",
									"\r",
									"\r",
									"let authType = pm.iterationData.get(\"authType\") || \"No Auth\"; // Handle Authorization header based on authType from JSON\r",
									"\r",
									"if (authType === \"Dietician Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.collectionVariables.get(\"dieticianToken\")\r",
									"    });\r",
									"} else if (authType === \"Admin Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.collectionVariables.get(\"adminToken\")\r",
									"    });\r",
									"} else if (authType === \"Expired Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.collectionVariables.get(\"expiredToken\")\r",
									"    });\r",
									"} else if (authType === \"No Auth\") {\r",
									"    \r",
									"    pm.request.headers.remove(\"Authorization\"); // Remove Authorization header completely\r",
									"}\r",
									"\r",
									"\r",
									"console.log(\"Request method:\", method); //  Debug logs (optional)\r",
									"console.log(\"Raw endpoint:\", rawEndpoint);\r",
									"console.log(\"Final dynamic endpoint:\", pm.variables.get(\"dynamicEndpoint\"));\r",
									"console.log(\"Auth Type:\", authType);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0c971508-5e0c-4b30-b736-3d05fc1ed300",
								"exec": [
									"const expectedStatus = parseInt(pm.iterationData.get(\"statusCode\"));",
									"const expectedStatusText = pm.iterationData.get(\"statusText\");",
									"",
									"pm.test(\"Status Code matches\", function () {",
									"    pm.response.to.have.status(expectedStatus);",
									"});",
									"",
									"pm.test(\"Status Text matches\", function () {",
									"    pm.expect(pm.response.status).to.eql(expectedStatusText);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "aadac4c8-16e7-46b2-84f6-7c03d48a257f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{dieticianToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}{{dynamicEndpoint}}"
					},
					"response": []
				},
				{
					"name": "Get_All_Patient_bs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a3c325e-4477-4465-a331-4919d5f691fb",
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(response);\r",
									"\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									"\r",
									"const jsonSchema = {\r",
									"   \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"patientId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"FirstName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"LastName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"ContactNumber\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"Email\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"Allergy\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"FoodPreference\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"CuisineCategory\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"FileMorbidity\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"66afef4ca2b35b78f82f7b4a\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"T4\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"TSH\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"T4\",\r",
									"                \"TSH\"\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"66afef4ca2b35b78f82f7b4a\"\r",
									"          ]\r",
									"        },\r",
									"        \"FileMorbidityCondition\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"66afef4ca2b35b78f82f7b4a\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"66afef4ca2b35b78f82f7b4a\"\r",
									"          ]\r",
									"        },\r",
									"        \"DateOfBirth\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"DieticianId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"Vitals\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"66afef4ca2b35b78f82f7b4a\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"Weight\": {\r",
									"                  \"type\": \"number\"\r",
									"                },\r",
									"                \"Height\": {\r",
									"                  \"type\": \"number\"\r",
									"                },\r",
									"                \"Temperature\": {\r",
									"                  \"type\": \"number\"\r",
									"                },\r",
									"                \"SP\": {\r",
									"                  \"type\": \"integer\"\r",
									"                },\r",
									"                \"DP\": {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"Weight\",\r",
									"                \"Height\",\r",
									"                \"Temperature\",\r",
									"                \"SP\",\r",
									"                \"DP\"\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"66afef4ca2b35b78f82f7b4a\"\r",
									"          ]\r",
									"        },\r",
									"        \"LastVisitDate\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"patientId\",\r",
									"        \"FirstName\",\r",
									"        \"LastName\",\r",
									"        \"ContactNumber\",\r",
									"        \"Email\",\r",
									"        \"Allergy\",\r",
									"        \"FoodPreference\",\r",
									"        \"CuisineCategory\",\r",
									"        \"FileMorbidity\",\r",
									"        \"FileMorbidityCondition\",\r",
									"        \"DateOfBirth\",\r",
									"        \"DieticianId\",\r",
									"        \"Vitals\",\r",
									"        \"LastVisitDate\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"if(pm.response.code === 200)\r",
									"{\r",
									" pm.test('Status String is OK', () => {\r",
									"pm.response.to.have.status(\"OK\");})\r",
									"\r",
									"    // pm.test(\"Verify JSON Schema\", ()=> {\r",
									"    //    pm.response.to.have.jsonSchema(jsonSchema)\r",
									"    //  });\r",
									"    \r",
									"}     \r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"pm.test('Validating Response is not NULL', function () {\r",
									"pm.expect(response).to.not.equal(null);})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6eccd932-e265-46fd-861f-5dd736d3ac04",
								"exec": [
									"const reqname = pm.iterationData.get(\"Reqname\");\r",
									"const myRequestName = \"Get Patient Morbidity Details\"; \r",
									"\r",
									"\r",
									"pm.variables.set(\"shouldRun\", reqname === myRequestName); // Mark whether this request should execute\r",
									"\r",
									"\r",
									"let method = pm.iterationData.get(\"method\"); // Set the HTTP method from data file\r",
									"if (method) pm.request.method = method.toUpperCase();\r",
									"\r",
									"\r",
									"let rawEndpoint = pm.iterationData.get(\"endpoint\") || \"/\"; // Replace collection variables inside the endpoint string\r",
									"let substitutedEndpoint = pm.variables.replaceIn(rawEndpoint).trim();\r",
									"\r",
									"substitutedEndpoint = substitutedEndpoint.replace(/^\\/+/, \"\");\r",
									"pm.variables.set(\"dynamicEndpoint\", \"/\" + substitutedEndpoint);\r",
									"\r",
									"\r",
									"let authType = pm.iterationData.get(\"authType\") || \"No Auth\"; // Auth token logic using collection variables\r",
									"\r",
									"if (authType === \"Dietician Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.collectionVariables.get(\"dieticianToken\")\r",
									"    });\r",
									"} else if (authType === \"Admin Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.collectionVariables.get(\"adminToken\")\r",
									"    });\r",
									"} else if (authType === \"Expired Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.collectionVariables.get(\"expiredToken\")\r",
									"    });\r",
									"} else if (authType === \"No Auth\") {\r",
									"    pm.request.headers.remove(\"Authorization\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "8348a814-a7db-45a4-a4e1-c7eabf5bc5bb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{dieticianToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/{{dynamicEndpoint}}"
					},
					"response": []
				}
			],
			"id": "3756d598-3916-41fb-a02a-8e2e7f6946cd"
		},
		{
			"name": "Morbidity",
			"item": [
				{
					"name": "ADMIN role",
					"item": [
						{
							"name": "TC_GET_MORB_ADMIN_001_Retrive_all_morbidity_valid bearer token_200_OK",
							"id": "6f2faebd-7137-4912-a616-9970b1a7d948",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{adminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_url}}/morbidity"
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_ADMIN_006_Retrive_all_morbidity_valid_test name_200_OK",
							"id": "f67639ef-784c-498f-96a5-219ba9f0b31d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": []
							},
							"response": [
								{
									"id": "6359c268-b927-40ed-a5dc-792bd7c4358a",
									"name": "Valid_test name",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbidity/TSH"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Fri, 18 Jul 2025 00:18:38 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=xufaf%2F4dCAEsb2HDFSNlZfNhCsLUKyi96R6%2F7YQHQlQ%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752797918\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=xufaf%2F4dCAEsb2HDFSNlZfNhCsLUKyi96R6%2F7YQHQlQ%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752797918\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "492"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "[\n    {\n        \"morbidityId\": 5,\n        \"morbidityTestId\": \"THYRO_TSH\",\n        \"morbidityNameRegex\": \"(?i)(.*)T(.*)S(.*)H(.*)|(.*)THYROID STIMULATING HORMONE(.*)\",\n        \"morbidityTestName\": \"TSH\",\n        \"morbidityTestUnit\": \"μIU/ml\",\n        \"morbidityMarkerMinVal\": 0.55,\n        \"morbidityMarkerMaxVal\": 4.78\n    },\n    {\n        \"morbidityId\": 15,\n        \"morbidityTestId\": \"THYRO_TSH_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T(.*)S(.*)H(.*)|(.*)THYROID STIMULATING HORMONE(.*)\",\n        \"morbidityTestName\": \"TSH\",\n        \"morbidityTestUnit\": \"mIU/L\",\n        \"morbidityMarkerMinVal\": 0.45,\n        \"morbidityMarkerMaxVal\": 4.12\n    }\n]"
								},
								{
									"id": "1d70a767-b081-4e1b-a60c-93e30e6002c5",
									"name": "Invalid test name",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{base_url}}/morbidity/pregnancy"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Fri, 18 Jul 2025 00:26:43 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=TSydy%2BpdIbvBgKbBoakRGkfyeLE8A9AZaC3n8NPZacI%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752798403\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=TSydy%2BpdIbvBgKbBoakRGkfyeLE8A9AZaC3n8NPZacI%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752798403\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "97"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"errorCode\": \"NOT_FOUND\",\n    \"errorMessage\": \"Morbidity not found with MorbidityTestName : pregnancy\"\n}"
								},
								{
									"id": "8d6ed7ab-8a8f-4a0f-adae-6f309e9a6afb",
									"name": "Partial_test name",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbidity/T"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Fri, 18 Jul 2025 00:20:44 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=HOz%2F6Nb5tFi5eTzPSlOyB1zPF%2BgiC6Nm7cZUKLMM9Xk%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752798044\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=HOz%2F6Nb5tFi5eTzPSlOyB1zPF%2BgiC6Nm7cZUKLMM9Xk%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752798044\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "[\n    {\n        \"morbidityId\": 8,\n        \"morbidityTestId\": \"THYRO_T3_1\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"ng/mL\",\n        \"morbidityMarkerMinVal\": 0.6,\n        \"morbidityMarkerMaxVal\": 1.8\n    },\n    {\n        \"morbidityId\": 9,\n        \"morbidityTestId\": \"THYRO_T3_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"pg/mL\",\n        \"morbidityMarkerMinVal\": 1.5,\n        \"morbidityMarkerMaxVal\": 4.1\n    },\n    {\n        \"morbidityId\": 11,\n        \"morbidityTestId\": \"THYRO_T4\",\n        \"morbidityNameRegex\": \"(?i)(.*)T4(.*)\",\n        \"morbidityTestName\": \"T4\",\n        \"morbidityTestUnit\": \"μg/dL\",\n        \"morbidityMarkerMinVal\": 5,\n        \"morbidityMarkerMaxVal\": 12\n    },\n    {\n        \"morbidityId\": 12,\n        \"morbidityTestId\": \"THYRO_T4_1\",\n        \"morbidityNameRegex\": \"(?i)(.*)T4(.*)\",\n        \"morbidityTestName\": \"T4\",\n        \"morbidityTestUnit\": \"ug/dL\",\n        \"morbidityMarkerMinVal\": 5,\n        \"morbidityMarkerMaxVal\": 12\n    },\n    {\n        \"morbidityId\": 7,\n        \"morbidityTestId\": \"THYRO_T3\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"ng/dL\",\n        \"morbidityMarkerMinVal\": 60,\n        \"morbidityMarkerMaxVal\": 180\n    },\n    {\n        \"morbidityId\": 13,\n        \"morbidityTestId\": \"THYRO_T4_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T4(.*)\",\n        \"morbidityTestName\": \"T4\",\n        \"morbidityTestUnit\": \"ng/dL\",\n        \"morbidityMarkerMinVal\": 0.8,\n        \"morbidityMarkerMaxVal\": 1.9\n    },\n    {\n        \"morbidityId\": 10,\n        \"morbidityTestId\": \"THYRO_T3_3\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"nmol/L\",\n        \"morbidityMarkerMinVal\": 0.9,\n        \"morbidityMarkerMaxVal\": 2.76\n    },\n    {\n        \"morbidityId\": 1,\n        \"morbidityTestId\": \"DIA_FG\",\n        \"morbidityNameRegex\": \"(?i)(.*)fasting(.*)[sugarglucose](.*)|(.*)glucose(.*)fasting(.*)\",\n        \"morbidityTestName\": \"Fasting Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 100,\n        \"morbidityMarkerMaxVal\": 125\n    },\n    {\n        \"morbidityId\": 5,\n        \"morbidityTestId\": \"THYRO_TSH\",\n        \"morbidityNameRegex\": \"(?i)(.*)T(.*)S(.*)H(.*)|(.*)THYROID STIMULATING HORMONE(.*)\",\n        \"morbidityTestName\": \"TSH\",\n        \"morbidityTestUnit\": \"μIU/ml\",\n        \"morbidityMarkerMinVal\": 0.55,\n        \"morbidityMarkerMaxVal\": 4.78\n    },\n    {\n        \"morbidityId\": 15,\n        \"morbidityTestId\": \"THYRO_TSH_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T(.*)S(.*)H(.*)|(.*)THYROID STIMULATING HORMONE(.*)\",\n        \"morbidityTestName\": \"TSH\",\n        \"morbidityTestUnit\": \"mIU/L\",\n        \"morbidityMarkerMinVal\": 0.45,\n        \"morbidityMarkerMaxVal\": 4.12\n    }\n]"
								},
								{
									"id": "09bdff29-760f-4878-877b-b810b7bc56cd",
									"name": "Numbers in test name",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{base_url}}/morbidity/567876"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Fri, 18 Jul 2025 00:21:43 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=fWFTNpkBvS0FUtpSI8Xw6OnrkWz%2BO5uSQlH1SMurJeU%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752798103\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=fWFTNpkBvS0FUtpSI8Xw6OnrkWz%2BO5uSQlH1SMurJeU%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752798103\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "94"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"errorCode\": \"NOT_FOUND\",\n    \"errorMessage\": \"Morbidity not found with MorbidityTestName : 567876\"\n}"
								},
								{
									"id": "3dde96cf-9aaf-4b56-8c3d-219446c8e04c",
									"name": "Lowercase letters in test name",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{base_url}}/morbidity/blood pressure"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Fri, 18 Jul 2025 00:22:49 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=CfWxTStMzJuZerBg8d%2FY2WsC4dpkzbc5VtC5N6Wn1HI%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752798169\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=CfWxTStMzJuZerBg8d%2FY2WsC4dpkzbc5VtC5N6Wn1HI%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752798169\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "233"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "[\n    {\n        \"morbidityId\": 14,\n        \"morbidityTestId\": \"BP_LEVEL\",\n        \"morbidityNameRegex\": \"(?i)(.*)Blood(.*)Pressure(.*)\",\n        \"morbidityTestName\": \"Blood Pressure Levels\",\n        \"morbidityTestUnit\": \"mm Hg\",\n        \"morbidityMarkerMinVal\": 80,\n        \"morbidityMarkerMaxVal\": 130\n    }\n]"
								},
								{
									"id": "c0443794-09a0-4652-b7a5-3ad6901f4827",
									"name": "Null/blank in test name",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{base_url}}/morbidity/ "
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Fri, 18 Jul 2025 00:24:35 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=es0xdRnOiAn%2BTCqW6T3yOeWXlniI426qJCspT8FCvdc%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752798275\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=es0xdRnOiAn%2BTCqW6T3yOeWXlniI426qJCspT8FCvdc%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752798275\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "940"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "[\n    {\n        \"morbidityId\": 2,\n        \"morbidityTestId\": \"DIA_AG\",\n        \"morbidityNameRegex\": \"(?i)(.*)average(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Average Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 121,\n        \"morbidityMarkerMaxVal\": 150\n    },\n    {\n        \"morbidityId\": 3,\n        \"morbidityTestId\": \"DIA_PG\",\n        \"morbidityNameRegex\": \"(?i)(.*)plasma(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Plasma Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 140,\n        \"morbidityMarkerMaxVal\": 199\n    },\n    {\n        \"morbidityId\": 14,\n        \"morbidityTestId\": \"BP_LEVEL\",\n        \"morbidityNameRegex\": \"(?i)(.*)Blood(.*)Pressure(.*)\",\n        \"morbidityTestName\": \"Blood Pressure Levels\",\n        \"morbidityTestUnit\": \"mm Hg\",\n        \"morbidityMarkerMinVal\": 80,\n        \"morbidityMarkerMaxVal\": 130\n    },\n    {\n        \"morbidityId\": 1,\n        \"morbidityTestId\": \"DIA_FG\",\n        \"morbidityNameRegex\": \"(?i)(.*)fasting(.*)[sugarglucose](.*)|(.*)glucose(.*)fasting(.*)\",\n        \"morbidityTestName\": \"Fasting Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 100,\n        \"morbidityMarkerMaxVal\": 125\n    }\n]"
								},
								{
									"id": "9c3fe310-0d87-4372-8cf4-f45010ff77e3",
									"name": "spcl charac  test name",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{base_url}}/morbidity/@#"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Fri, 18 Jul 2025 00:25:42 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=X%2Br2JPTm4VAvrUxZMgnWpSbRk%2FAeNFPKIyAWU%2Bp7KT4%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752798342\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=X%2Br2JPTm4VAvrUxZMgnWpSbRk%2FAeNFPKIyAWU%2Bp7KT4%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752798342\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "89"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"errorCode\": \"NOT_FOUND\",\n    \"errorMessage\": \"Morbidity not found with MorbidityTestName : @\"\n}"
								}
							]
						},
						{
							"name": "TC_POST_MORB_ADMIN_004_Retrive_all_morbidity_Invalid Method_400_Bad Request",
							"id": "4b22b806-8299-402a-8c33-868301038def",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{adminToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userLoginEmail\": \"{{dieticianEmail}}\",\n  \"password\": \"{{dieticianPassword}}\"\n}"
								},
								"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbidity"
							},
							"response": [
								{
									"id": "c39e8bd3-032a-410d-8b00-442c48c1116a",
									"name": "Invalid Method",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"userLoginEmail\": \"{{dieticianEmail}}\",\n  \"password\": \"{{dieticianPassword}}\"\n}"
										},
										"url": "{{base_url}}/morbidity"
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Fri, 18 Jul 2025 00:27:42 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=8M80QspWWb70aecO72B%2FiUZL51TkUbaf8lSpVU6AaRE%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752798462\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=8M80QspWWb70aecO72B%2FiUZL51TkUbaf8lSpVU6AaRE%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752798462\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "227"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"morbidityTestName\": \"Morbidity Test Name is mandatory\",\n    \"morbidityTestId\": \"Morbidity Test Id is mandatory\",\n    \"morbidityNameRegex\": \"Morbidity Name Regex Pattern is mandatory\",\n    \"morbidityTestUnit\": \"Morbidity Test Unit is mandatory\"\n}"
								}
							]
						}
					],
					"id": "87f83aed-4133-420a-9576-8fdba39fdd35"
				},
				{
					"name": "Dietcian role",
					"item": [
						{
							"name": "TC_GET_MORB_DIET_001_GET _all morbidity_valid bearer token_200_OK",
							"id": "2627ff02-ef8b-4493-89c9-e9251b00ca09",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{dieticianToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbidity"
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_DIET_002_GET_all morbidity_invalid bearer token_401_Unauthorized",
							"id": "55f35a3e-a451-45dc-9fe7-5a2b39a17e99",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{adminToken}}00"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician/morbidity"
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_DIET_003_GET_all morbidity_invalid base URL_404_Not Found",
							"id": "162debeb-76f2-4748-b482-895fa6af9973",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{adminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://dietician-july-api-hackathon80f2590665cc.herokuapp.com/dietician/dietician/morbidity"
							},
							"response": []
						},
						{
							"name": "TC_POST_MORB_DIET_004_POST_all morbidity_invalid method_400_Bad Request",
							"id": "b45a3218-ac9e-4996-b5b3-4c0e1ca5fdc1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{dieticianToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userLoginEmail\": \"{{dieticianEmail}}\",\n  \"password\": \"{{dieticianPassword}}\"\n}"
								},
								"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbidity"
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_DIET_005_GET_all morbidity_invalid endpoint_404_Not found",
							"id": "0420821a-a3b2-4d24-92ad-b12442e01698",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{dieticianToken}}"
									}
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userLoginEmail\": \"{{dieticianEmail}}\",\n  \"password\": \"{{dieticianPassword}}\"\n}"
								},
								"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbdity"
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_DIET_006_Retrieve morbidity with valid test name_200_OK",
							"id": "0f55f1cf-133e-48c3-b3a6-37045f056dda",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{dieticianToken}}"
									}
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userLoginEmail\": \"{{dieticianEmail}}\",\n  \"password\": \"{{dieticianPassword}}\"\n}"
								},
								"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbidity/blood pressure"
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_DIET_007_Retrieve morbidity with partial test name_200_OK",
							"id": "672b2c37-4883-4a7f-8cbb-bf519537c33b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{dieticianToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbidity/blood "
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_DIET_008_Retrieve morbidity with numbers in test name_404_Not Found",
							"id": "2d7d4291-5737-446d-b1e9-e47fe0761945",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{dieticianToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{base_url}}morbidity/567867"
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_DIET_009_Retrieve_morbidity_Lowercase letters _test name_200_OK",
							"id": "7041eebe-4c1d-4078-9327-093df619eb4f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{dieticianToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_url}}/morbidity/hba1c"
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_DIET_010_Retrieve_morbidity_Null/Blank_test name_200_OK",
							"id": "41fc4315-4711-4c0f-ba06-2efd0905ef10",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{dieticianToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_url}}/morbidity/ "
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_DIET_011_Retrieve_morbidity_spcl characters _test name_404_Not Found",
							"id": "ce54ed81-dd48-4f14-aa79-8bc72a000339",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{dieticianToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_url}}/morbidity/@#"
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_DIET_012_Retrieve_morbidity_invalid/non-existant_test name_404_Not Found",
							"id": "5f3df44d-66f3-49d4-bb3c-a667fab960d0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{dieticianToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_url}}/morbidity/pregnancy"
							},
							"response": []
						}
					],
					"id": "d66bffcd-ffb5-4e5a-9590-38cc2630ec37"
				}
			],
			"id": "43ee67dd-3ba7-4336-bf2b-aa2419ec9bfc"
		},
		{
			"name": "Morbidity Copy",
			"item": [
				{
					"name": "ADMIN role",
					"item": [
						{
							"name": "TC_GET_MORB_ADMIN_001_Retrive_all_morbidity_valid bearer token_200_OK",
							"id": "aa85895f-e9c5-49d1-b4dc-8ad522219b28",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{adminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_url}}/morbidity"
							},
							"response": [
								{
									"id": "0a5894e6-ad55-4a3b-89ef-f9812a4486a5",
									"name": "Retrive all morbidities",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{base_url}}/morbidity"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Thu, 17 Jul 2025 23:43:22 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=WvaUBgZ6X7HtFvaE6JHGeLhWv5UXvPL8mr76yd3H11o%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752795802\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=WvaUBgZ6X7HtFvaE6JHGeLhWv5UXvPL8mr76yd3H11o%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752795802\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "[\n    {\n        \"morbidityId\": 2,\n        \"morbidityTestId\": \"DIA_AG\",\n        \"morbidityNameRegex\": \"(?i)(.*)average(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Average Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 121,\n        \"morbidityMarkerMaxVal\": 150\n    },\n    {\n        \"morbidityId\": 8,\n        \"morbidityTestId\": \"THYRO_T3_1\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"ng/mL\",\n        \"morbidityMarkerMinVal\": 0.6,\n        \"morbidityMarkerMaxVal\": 1.8\n    },\n    {\n        \"morbidityId\": 4,\n        \"morbidityTestId\": \"DIA_HBA1C\",\n        \"morbidityNameRegex\": \"(.*)HbA[1I]c(.*)|(.*)H(.*)P(.*)L(.*)C(.*)\",\n        \"morbidityTestName\": \"HbA1c\",\n        \"morbidityTestUnit\": \"%\",\n        \"morbidityMarkerMinVal\": 5.7,\n        \"morbidityMarkerMaxVal\": 6.5\n    },\n    {\n        \"morbidityId\": 9,\n        \"morbidityTestId\": \"THYRO_T3_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"pg/mL\",\n        \"morbidityMarkerMinVal\": 1.5,\n        \"morbidityMarkerMaxVal\": 4.1\n    },\n    {\n        \"morbidityId\": 11,\n        \"morbidityTestId\": \"THYRO_T4\",\n        \"morbidityNameRegex\": \"(?i)(.*)T4(.*)\",\n        \"morbidityTestName\": \"T4\",\n        \"morbidityTestUnit\": \"μg/dL\",\n        \"morbidityMarkerMinVal\": 5,\n        \"morbidityMarkerMaxVal\": 12\n    },\n    {\n        \"morbidityId\": 3,\n        \"morbidityTestId\": \"DIA_PG\",\n        \"morbidityNameRegex\": \"(?i)(.*)plasma(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Plasma Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 140,\n        \"morbidityMarkerMaxVal\": 199\n    },\n    {\n        \"morbidityId\": 12,\n        \"morbidityTestId\": \"THYRO_T4_1\",\n        \"morbidityNameRegex\": \"(?i)(.*)T4(.*)\",\n        \"morbidityTestName\": \"T4\",\n        \"morbidityTestUnit\": \"ug/dL\",\n        \"morbidityMarkerMinVal\": 5,\n        \"morbidityMarkerMaxVal\": 12\n    },\n    {\n        \"morbidityId\": 7,\n        \"morbidityTestId\": \"THYRO_T3\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"ng/dL\",\n        \"morbidityMarkerMinVal\": 60,\n        \"morbidityMarkerMaxVal\": 180\n    },\n    {\n        \"morbidityId\": 13,\n        \"morbidityTestId\": \"THYRO_T4_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T4(.*)\",\n        \"morbidityTestName\": \"T4\",\n        \"morbidityTestUnit\": \"ng/dL\",\n        \"morbidityMarkerMinVal\": 0.8,\n        \"morbidityMarkerMaxVal\": 1.9\n    },\n    {\n        \"morbidityId\": 10,\n        \"morbidityTestId\": \"THYRO_T3_3\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"nmol/L\",\n        \"morbidityMarkerMinVal\": 0.9,\n        \"morbidityMarkerMaxVal\": 2.76\n    },\n    {\n        \"morbidityId\": 14,\n        \"morbidityTestId\": \"BP_LEVEL\",\n        \"morbidityNameRegex\": \"(?i)(.*)Blood(.*)Pressure(.*)\",\n        \"morbidityTestName\": \"Blood Pressure Levels\",\n        \"morbidityTestUnit\": \"mm Hg\",\n        \"morbidityMarkerMinVal\": 80,\n        \"morbidityMarkerMaxVal\": 130\n    },\n    {\n        \"morbidityId\": 1,\n        \"morbidityTestId\": \"DIA_FG\",\n        \"morbidityNameRegex\": \"(?i)(.*)fasting(.*)[sugarglucose](.*)|(.*)glucose(.*)fasting(.*)\",\n        \"morbidityTestName\": \"Fasting Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 100,\n        \"morbidityMarkerMaxVal\": 125\n    },\n    {\n        \"morbidityId\": 5,\n        \"morbidityTestId\": \"THYRO_TSH\",\n        \"morbidityNameRegex\": \"(?i)(.*)T(.*)S(.*)H(.*)|(.*)THYROID STIMULATING HORMONE(.*)\",\n        \"morbidityTestName\": \"TSH\",\n        \"morbidityTestUnit\": \"μIU/ml\",\n        \"morbidityMarkerMinVal\": 0.55,\n        \"morbidityMarkerMaxVal\": 4.78\n    },\n    {\n        \"morbidityId\": 15,\n        \"morbidityTestId\": \"THYRO_TSH_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T(.*)S(.*)H(.*)|(.*)THYROID STIMULATING HORMONE(.*)\",\n        \"morbidityTestName\": \"TSH\",\n        \"morbidityTestUnit\": \"mIU/L\",\n        \"morbidityMarkerMinVal\": 0.45,\n        \"morbidityMarkerMaxVal\": 4.12\n    }\n]"
								},
								{
									"id": "70411f9b-c129-48c4-b68e-669acf65778b",
									"name": "Invalid bearer token",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{base_url}}/morbidity"
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Fri, 18 Jul 2025 00:07:25 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=kXrKHlRxSk6WdtkCROzhtFFvXXDab9oclM2auh4sQ9c%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752797245\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=kXrKHlRxSk6WdtkCROzhtFFvXXDab9oclM2auh4sQ9c%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752797245\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "123"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2025-07-18T00:07:25.753114136\",\n    \"status\": 401,\n    \"error\": \"Unauthorized\",\n    \"message\": \"An unexpected error occurred.\"\n}"
								},
								{
									"id": "4f0084da-158a-407b-a71e-330bfe20f120",
									"name": "Invalid baseURL",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "https://dietician-july-api-hackathon80f2590665cc.herokuapp.com/dietician/morbidity"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Content-Length",
											"value": "548"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "2025-07-18 00:15:42.051579462 +0000 UTC"
										},
										{
											"key": "Server",
											"value": "heroku-router"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "<!DOCTYPE html>\n<html>\n    <head>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta charset=\"utf-8\">\n        <title>No such app</title>\n        <style media=\"screen\">\n      html,body,iframe {\n        margin: 0;\n        padding: 0;\n      }\n      html,body {\n        height: 100%;\n        overflow: hidden;\n      }\n      iframe {\n        width: 100%;\n        height: 100%;\n        border: 0;\n      }\n    </style>\n    </head>\n    <body>\n        <iframe src=\"//www.herokucdn.com/error-pages/no-such-app.html\"></iframe>\n    </body>\n</html>"
								},
								{
									"id": "4d4f34de-e29b-4d6b-a627-e0250db14d4d",
									"name": "Invalid End point",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{base_url}}/morb"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Fri, 18 Jul 2025 00:16:41 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=%2FwbyW2pD7drwBAyQvvg%2BxPAX9ZGTAfaORhjHYIaqSCU%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752797801\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=%2FwbyW2pD7drwBAyQvvg%2BxPAX9ZGTAfaORhjHYIaqSCU%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752797801\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "114"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2025-07-18T00:16:41.194662467\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"message\": \"Endpoint not supported.\"\n}"
								}
							]
						},
						{
							"name": "TC_GET_MORB_ADMIN_002_Retrive_all_morbidity_Invalid bearer token_401_Unauthorized",
							"id": "b61d674e-e26c-4f26-8a84-425f8fe4d78d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{adminToken}}00"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbidity"
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_ADMIN_003_Retrive_all_morbidity_Invalid baseURL_404_Not Found",
							"id": "87cc747f-a590-4244-84cd-7a2f6217f6c4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{adminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "https://dietician-july-api-hackathon80f2590665cc.herokuapp.com/dietician/morbidity"
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_ADMIN_005_Retrive_all_morbidity_Invalid End point_404_Not Found",
							"id": "e4191517-e2ef-4472-a2c8-d65fabd88ce6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{adminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morb"
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_ADMIN_007_Retrive_all_morbidity_partial_test name_200_OK",
							"id": "37052386-482c-41cf-bcb7-fbefd43b705d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": []
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_ADMIN_008_Retrive_all_morbidity_Numbers in test name_404_Not Found",
							"id": "a2cdac55-a6bb-4f40-b351-43eb7ac45bc2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": []
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_ADMIN_009_Retrive_morbidity_Lowercase letters in test name_200_OK",
							"id": "0ce52b6e-e03b-4ab5-9f8e-dfca710b27d5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{adminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbidity/blood pressure"
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_ADMIN_010_Retrive_morbidity_Null/blank in test name_200_OK",
							"id": "3b58e061-cadb-4357-9183-86e0c00a1ca4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{admin_token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbidity/blood pressure"
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_ADMIN_011_Retrive_morbidity_spcl charac in test name_404_Not Found",
							"id": "c465881b-4839-46dc-a537-1eb0cee964bf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{adminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbidity/@#bloodpressure"
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_ADMIN_012_Retrive_morbidity_ invalid test name_404_Not Found",
							"id": "ccc95b06-faa9-4f56-94b1-e4945def2387",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{adminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_url}}/morbidity/bp"
							},
							"response": []
						}
					],
					"id": "5ede8cdb-b96b-4d72-afd9-7ba29a83d6b4"
				},
				{
					"name": "Dietcian role",
					"item": [
						{
							"name": "TC_GET_MORB_DIET_001_GET _all morbidity_valid bearer token_200_OK",
							"id": "629278e7-0e29-4038-a07e-7ef335064130",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{dieticianToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbidity"
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_DIET_002_GET_all morbidity_invalid bearer token_401_Unauthorized",
							"id": "927321e2-ab4d-4781-ae33-112af4c47383",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{adminToken}}00"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician/morbidity"
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_DIET_003_GET_all morbidity_invalid base URL_404_Not Found",
							"id": "f65ef221-1e83-4033-a4d7-681937c9432d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{adminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://dietician-july-api-hackathon80f2590665cc.herokuapp.com/dietician/dietician/morbidity"
							},
							"response": []
						},
						{
							"name": "TC_POST_MORB_DIET_004_POST_all morbidity_invalid method_400_Bad Request",
							"id": "57d042b3-e45a-4dc0-a110-e8ae26de4a15",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{dieticianToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userLoginEmail\": \"{{dieticianEmail}}\",\n  \"password\": \"{{dieticianPassword}}\"\n}"
								},
								"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbidity"
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_DIET_005_GET_all morbidity_invalid endpoint_404_Not found",
							"id": "31f3960d-2e6b-432e-a12b-2d43eaa3df8d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{dieticianToken}}"
									}
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userLoginEmail\": \"{{dieticianEmail}}\",\n  \"password\": \"{{dieticianPassword}}\"\n}"
								},
								"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbdity"
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_DIET_006_Retrieve morbidity with valid test name_200_OK",
							"id": "4e564263-2ad0-418c-b96f-9efa99733967",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{dieticianToken}}"
									}
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userLoginEmail\": \"{{dieticianEmail}}\",\n  \"password\": \"{{dieticianPassword}}\"\n}"
								},
								"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbidity/blood pressure"
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_DIET_007_Retrieve morbidity with partial test name_200_OK",
							"id": "85eecf9e-3a51-475c-81d8-aad3c39d472a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{dieticianToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/morbidity/blood "
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_DIET_008_Retrieve morbidity with numbers in test name_404_Not Found",
							"id": "8a942876-7d58-42a5-9cb6-430dc59d0110",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{dieticianToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{base_url}}morbidity/567867"
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_DIET_009_Retrieve_morbidity_Lowercase letters _test name_200_OK",
							"id": "de82f0ec-bdf8-4e87-96a6-e4a064a01e46",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{dieticianToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_url}}/morbidity/hba1c"
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_DIET_010_Retrieve_morbidity_Null/Blank_test name_200_OK",
							"id": "094836e0-4d47-4a7b-812f-a45321eb87ef",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{dieticianToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_url}}/morbidity/ "
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_DIET_011_Retrieve_morbidity_spcl characters _test name_404_Not Found",
							"id": "f4b81261-e310-4489-9fc7-7042ed3f8832",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{dieticianToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_url}}/morbidity/@#"
							},
							"response": []
						},
						{
							"name": "TC_GET_MORB_DIET_012_Retrieve_morbidity_invalid/non-existant_test name_404_Not Found",
							"id": "ac004d29-d16a-429d-823a-9f46ec07d69f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{dieticianToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_url}}/morbidity/pregnancy"
							},
							"response": []
						}
					],
					"id": "3d1eb0e4-5fa6-43d4-81c7-1b516c9fbcdb"
				}
			],
			"id": "9698c054-eb49-408d-a594-2c79b64fab25"
		},
		{
			"name": "Delete and CleanUp",
			"item": [
				{
					"name": "DeleteDieticianByID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "63689547-2c1c-49b9-a0dd-5e615b7a04ca",
								"exec": [
									"const expectedStatus = parseInt(pm.iterationData.get(\"statusCode\"));\r",
									"const expectedStatusText = pm.iterationData.get(\"statusText\");\r",
									"\r",
									"pm.test(\"Status Code matches\", function () {\r",
									"    pm.response.to.have.status(expectedStatus);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Text matches\", function () {\r",
									"    pm.expect(pm.response.status).to.eql(expectedStatusText);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f05a5786-f372-4dfb-9dd6-be3206f9108c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/dietician/{{dieticianId}}"
					},
					"response": []
				},
				{
					"name": "Delete Patient by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df7faa82-642d-4aaf-a301-33762a4badfb",
								"exec": [
									"const expectedStatus = parseInt(pm.iterationData.get(\"statusCode\"));",
									"const expectedStatusText = pm.iterationData.get(\"statusText\");",
									"",
									"pm.test(\"Status Code matches\", function () {",
									"    pm.response.to.have.status(expectedStatus);",
									"});",
									"",
									"pm.test(\"Status Text matches\", function () {",
									"    pm.expect(pm.response.status).to.eql(expectedStatusText);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7e40c849-b4cf-42c0-9214-97f5ffc8d9d0",
								"exec": [
									"const reqname = pm.iterationData.get(\"Reqname\");\r",
									"const myRequestName = \"Delete Patient by ID\"; \r",
									"\r",
									"\r",
									"pm.variables.set(\"shouldRun\", reqname === myRequestName); // Mark whether this request should execute\r",
									"\r",
									" \r",
									"let method = pm.iterationData.get(\"method\"); // Set HTTP method dynamically\r",
									"if (method) pm.request.method = method.toUpperCase();\r",
									"\r",
									"\r",
									"let rawEndpoint = pm.iterationData.get(\"endpoint\") || \"/\"; // Get and substitute dynamic endpoint from JSON data\r",
									"let substitutedEndpoint = pm.variables.replaceIn(rawEndpoint).trim();\r",
									"substitutedEndpoint = substitutedEndpoint.replace(/^\\/+/, \"\"); // clean leading slashes\r",
									"pm.variables.set(\"dynamicEndpoint\", \"/\" + substitutedEndpoint);\r",
									"\r",
									"\r",
									"let authType = pm.iterationData.get(\"authType\") || \"No Auth\"; // Handle Authorization by role using collection variables\r",
									"\r",
									"if (authType === \"Dietician Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.collectionVariables.get(\"dieticianToken\")\r",
									"    });\r",
									"} else if (authType === \"Admin Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.collectionVariables.get(\"adminToken\")\r",
									"    });\r",
									"} else if (authType === \"Expired Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.collectionVariables.get(\"expiredToken\")\r",
									"    });\r",
									"} else if (authType === \"No Auth\") {\r",
									"    pm.request.headers.remove(\"Authorization\");\r",
									"}\r",
									"\r",
									"\r",
									"console.log(\"Scenario:\", pm.iterationData.get(\"scenario\")); // Log for debugging\r",
									"console.log(\"Method:\", method);\r",
									"console.log(\"Auth Type:\", authType);\r",
									"console.log(\"Final Endpoint:\", substitutedEndpoint);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "3d5c1a23-9ea4-4a93-8a06-af2f752668f5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{dieticianToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}{{dynamicEndpoint}}"
					},
					"response": []
				}
			],
			"id": "1cc4e5b6-68de-4bd4-b355-4c8deb1e1a5c"
		},
		{
			"name": "Skip",
			"item": [
				{
					"name": "Skip",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dae7c71f-3fd8-4d1d-b122-541eb4f0ac02",
								"exec": [
									"// Do nothing, this is just a skip handler\r",
									"console.log(\"Skipped this iteration for irrelevant data.\");\r",
									"pm.execution.setNextRequest(null);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "97694354-59e8-4248-bc0f-a9088b15107c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://postman-echo.com/get"
					},
					"response": []
				}
			],
			"id": "cde3bbe3-1a74-41c0-96fa-6331d42c3ddb"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "53b03a7f-a9dd-4c2f-a1b0-d157057443e3",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"//Login as Admin and create Token\r",
					"const LOGIN_URL = 'https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login';\r",
					"const ADMIN_EMAIL = 'Team404@gmail.com';       \r",
					"const ADMIN_PASSWORD = 'test';             \r",
					"\r",
					"function isTokenExpired() {\r",
					"    const expiry = pm.environment.get('adminTokenExpiresAt');\r",
					"    if (!expiry) return true;\r",
					"    const now = new Date().getTime();\r",
					"    return now >= parseInt(expiry);\r",
					"}\r",
					"if (!pm.environment.get('adminToken') || isTokenExpired()) {\r",
					"    console.log('Logging in to refresh admin token...');\r",
					"\r",
					"    pm.sendRequest({\r",
					"        url: LOGIN_URL,\r",
					"        method: 'POST',\r",
					"        header: {\r",
					"            'Content-Type': 'application/json'\r",
					"        },\r",
					"        body: {\r",
					"            mode: 'raw',\r",
					"            raw: JSON.stringify({\r",
					"                userLoginEmail: ADMIN_EMAIL,\r",
					"                password: ADMIN_PASSWORD\r",
					"            })\r",
					"        }\r",
					"    }, function (err, res) {\r",
					"        if (err) {\r",
					"            console.error('Login request failed:', err);\r",
					"        } else {\r",
					"            const json = res.json();\r",
					"\r",
					"            if (json.token) {\r",
					"                const token = json.token;\r",
					"                const expiresInMillis = 60 * 60 * 1000; // ⏰ 1 hour (customize if needed)\r",
					"\r",
					"                // Save token and expiry\r",
					"                pm.environment.set('adminToken', token);\r",
					"                pm.environment.set('adminTokenExpiresAt', (new Date().getTime() + expiresInMillis).toString());\r",
					"\r",
					"                console.log('Token saved:', token);\r",
					"            } else {\r",
					"                console.warn('Token not found in login response:', json);\r",
					"            }\r",
					"        }\r",
					"    });\r",
					"} else {\r",
					"    console.log('Valid token found, skipping login');\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "dfce0656-2ce2-49e5-bd45-dfc4d0b8a452",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "adminEmail",
			"value": "Team404@gmail.com",
			"type": "string"
		},
		{
			"key": "adminPassword",
			"value": "test",
			"type": "string"
		},
		{
			"key": "adminToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "expiredToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "base_url",
			"value": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician",
			"type": "string"
		},
		{
			"key": "dieticianEmail",
			"value": "",
			"type": "string"
		},
		{
			"key": "dieticianId",
			"value": "",
			"type": "string"
		},
		{
			"key": "dieticianPassword",
			"value": "",
			"type": "string"
		},
		{
			"key": "patientId",
			"value": "",
			"type": "string"
		},
		{
			"key": "fileId",
			"value": "",
			"type": "string"
		},
		{
			"key": "dieticianToken",
			"value": ""
		},
		{
			"key": "PatientContactNumber",
			"value": "",
			"disabled": true
		},
		{
			"key": "PatientEmail",
			"value": "",
			"disabled": true
		},
		{
			"key": "PatientDOB",
			"value": "",
			"disabled": true
		},
		{
			"key": "DateOfBirth",
			"value": "",
			"disabled": true
		},
		{
			"key": "PatientContactNumber",
			"value": ""
		},
		{
			"key": "PatientEmail",
			"value": ""
		},
		{
			"key": "PatientDOB",
			"value": ""
		},
		{
			"key": "ContactNumber1",
			"value": ""
		},
		{
			"key": "Email1",
			"value": ""
		},
		{
			"key": "DateOfBirth1",
			"value": ""
		}
	]
}