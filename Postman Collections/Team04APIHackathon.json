{
	"info": {
		"_postman_id": "0236d80b-87af-455d-80e1-b189b61bb212",
		"name": "Dietician _API_Team4",
		"description": "Complete automated flow with Admin login, Dietician creation/login, Patient creation, Reports upload, and test cases.",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Generate Dietician token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var json = pm.response.json();",
									"pm.environment.set('dieticianEmail', json.Email);",
									"pm.environment.set('dieticianPassword', json.loginPassword);",
									"pm.environment.set('dieticianId', json.id);",
									"console.log('Dietician created. Email: ' + json.Email + ', Password: ' + json.loginPassword + ', dieticianId: ' + json.id);",
									"",
									"// ✅ Status code check",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "26bb88c0-5e32-4e0e-8eec-efebbe9a1a1c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random 10-digit Contact Number\r",
									"const randomContact = \"1\" + Math.floor(100000000 + Math.random() * 900000000);\r",
									"pm.variables.set(\"ContactNumber\", randomContact);\r",
									"\r",
									"// Generate random email\r",
									"const emailPrefix = \"dietician\" + Math.floor(Math.random() * 10000);\r",
									"pm.variables.set(\"Email\", emailPrefix + \"@example.com\");\r",
									"\r",
									"// Generate random DOB between 1980 and 1995\r",
									"function getRandomDOB() {\r",
									"    const start = new Date(1980, 0, 1);\r",
									"    const end = new Date(1995, 11, 31);\r",
									"    const dob = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    return dob.toISOString();\r",
									"}\r",
									"pm.variables.set(\"DateOfBirth\", getRandomDOB());"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "8f74a299-23dc-4b78-b6dc-8cf921c3c9ec"
							}
						}
					],
					"id": "9e33354c-263c-4a1b-89d3-f4d221ac253d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Education\": \"MBBS\",\n  \"Email\": \"{{Email}}\",\n  \"Firstname\": \"John\",\n  \"HospitalCity\": \"CityName\",\n  \"HospitalName\": \"HospitalName\",\n  \"HospitalPincode\": \"123456\",\n  \"HospitalStreet\": \"StreetName\",\n  \"Lastname\": \"Doe\"\n}"
						},
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician"
					},
					"response": []
				},
				{
					"name": "Dietician Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ✅ Status code check",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let json = pm.response.json();",
									"pm.environment.set(\"dieticianToken\", json.token);"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "7590bdce-6b1c-4e95-9bb0-2aed7a49fde9"
							}
						}
					],
					"id": "e557f78c-37ad-41fd-8988-f77e061804fa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{adminToken}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userLoginEmail\": \"{{dieticianEmail}}\",\n  \"password\": \"{{dieticianPassword}}\"\n}\n\n// ✅ Status code check\npm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});"
						},
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login"
					},
					"response": []
				}
			],
			"id": "d9ade4ce-f9e9-4847-a481-c0d2dd1ca4ec"
		},
		{
			"name": "Dietician Module",
			"item": [],
			"id": "9037f836-8ad6-47ba-800a-f4de84b3b7ee"
		},
		{
			"name": "Patient Module",
			"item": [
				{
					"name": "Create Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assuming patientId comes in response",
									"var json = pm.response.json();",
									"if (json.patientId) {",
									"    pm.environment.set('patientId', json.patientId);",
									"    console.log('Patient created with ID: ' + json.patientId);",
									"} else {",
									"    console.log('Patient ID not found in response');",
									"}",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "ee4dbaf4-875b-4779-8ebd-1852c0060aae"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random Contact Number starting with 2\r",
									"const contactNumber = \"2\" + Math.floor(100000000 + Math.random() * 900000000);\r",
									"pm.environment.set(\"PatientContactNumber\", contactNumber);\r",
									"\r",
									"// Generate unique email\r",
									"const emailPrefix = \"jane\" + Math.floor(Math.random() * 10000);\r",
									"pm.environment.set(\"PatientEmail\", `${emailPrefix}@example.com`);\r",
									"\r",
									"// Generate random DOB between 1985 and 2002\r",
									"function getRandomDOB() {\r",
									"    const start = new Date(1985, 0, 1);\r",
									"    const end = new Date(2002, 11, 31);\r",
									"    const dob = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    return dob.toISOString().split('T')[0];\r",
									"}\r",
									"pm.environment.set(\"PatientDOB\", getRandomDOB());"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "58f8276e-88b6-47cf-a5fd-8e3a4258be11"
							}
						}
					],
					"id": "3a7a8f18-e01b-4cbc-9ed9-7282af7e7bbb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{dieticianToken}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{dieticianToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{\n  \"FirstName\": \"Jaane\",\n  \"LastName\": \"Smith\",\n  \"ContactNumber\": \"{{PatientContactNumber}}\",\n  \"Email\": \"{{PatientEmail}}\",\n  \"Allergy\": \"NONE\",\n  \"FoodPreference\": \"Vegetarian\",\n  \"CuisineCategory\": \"Indian\",\n  \"DateOfBirth\": \"{{PatientDOB}}\"\n}",
									"type": "text"
								},
								{
									"key": "file",
									"value": "",
									"type": "file"
								}
							]
						},
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient"
					},
					"response": []
				},
				{
					"name": "Add New Reports",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ✅ Status code check",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// ✅ Schema validation (example - adjust per endpoint)",
									"const schema = {",
									"  type: \"object\",",
									"  properties: {",
									"    token: { type: \"string\" },",
									"    userId: { type: \"string\" },",
									"    email: { type: \"string\" }",
									"  },",
									"  required: [\"token\", \"userId\", \"email\"]",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"  pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "b0321dd6-c1dc-41c0-a632-a8c71b3e5198"
							}
						}
					],
					"id": "16614059-d800-4c62-861c-492c5e882686",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{dieticianToken}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{dieticianToken}}"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{\n  \"FirstName\": \"Jane\",\n  \"LastName\": \"Smith\",\n  \"ContactNumber\": \"9916543210\",\n  \"Email\": \"jane.smiiith319@example.com\",\n  \"Allergy\": \"NONE\",\n  \"FoodPreference\": \"Vegetarian\",\n  \"CuisineCategory\": \"Indian\",\n  \"DateOfBirth\": \"1993-05-20\"\n}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Users/chand/Downloads/Sample reports-20250523T164632Z-1-001 (1)/Sample reports/HyperThyroid_Report_final.pdf"
								},
								{
									"key": "vitals",
									"value": "{\n  \"Weight\": 70.0,\n  \"Height\": 170.0,\n  \"Temperature\": 36.5,\n  \"SP\": 120,\n  \"DP\": 80\n}",
									"type": "text"
								}
							]
						},
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient/newReports/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "Get Patient Morbidity Details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "694d7ddb-ec72-4242-998a-6fa02da83266",
								"exec": [
									"// Set the HTTP method from data file\r",
									"let method = pm.iterationData.get(\"method\");\r",
									"if (method) pm.request.method = method.toUpperCase();\r",
									"\r",
									"// Replace environment variables inside the endpoint string\r",
									"let rawEndpoint = pm.iterationData.get(\"endpoint\") || \"/\";\r",
									"let substitutedEndpoint = pm.variables.replaceIn(rawEndpoint).trim();\r",
									"\r",
									"// Normalize slashes and set for dynamic use\r",
									"substitutedEndpoint = substitutedEndpoint.replace(/^\\/+/, \"\");\r",
									"pm.variables.set(\"dynamicEndpoint\", \"/\" + substitutedEndpoint);\r",
									"\r",
									"// Auth token logic\r",
									"let authType = pm.iterationData.get(\"authType\") || \"No Auth\";\r",
									"if (authType === \"Dietician Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.environment.get(\"dieticianToken\")\r",
									"    });\r",
									"} else if (authType === \"Admin Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.environment.get(\"adminToken\")\r",
									"    });\r",
									"} else if (authType === \"Expired Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.environment.get(\"expiredToken\")\r",
									"    });\r",
									"} else if (authType === \"No Auth\") {\r",
									"    pm.request.headers.remove(\"Authorization\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c05c2dc0-763e-49b3-8564-c1a34a76dff4",
								"exec": [
									"pm.test(\"Status code matches expected\", function () {",
									"    pm.response.to.have.status(pm.iterationData.get(\"statusCode\"));",
									"});",
									"",
									"pm.test(\"Status text matches expected\", function () {",
									"    pm.expect(pm.response.status).to.eql(pm.iterationData.get(\"statusText\"));",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f981bb00-d7cb-462d-b3c0-16fb43dba9b9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{dieticianToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}{{dynamicEndpoint}}"
					},
					"response": []
				},
				{
					"name": "Retrieve Patient File by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "98657196-2c04-4557-b9b7-c62351aa1385",
								"exec": [
									"// Set the HTTP method from data file\r",
									"let method = pm.iterationData.get(\"method\");\r",
									"if (method) pm.request.method = method.toUpperCase();\r",
									"\r",
									"// Replace environment variables inside the endpoint string\r",
									"let rawEndpoint = pm.iterationData.get(\"endpoint\") || \"/\";\r",
									"let substitutedEndpoint = pm.variables.replaceIn(rawEndpoint).trim();\r",
									"\r",
									"// Normalize slashes and set for dynamic use\r",
									"substitutedEndpoint = substitutedEndpoint.replace(/^\\/+/, \"\");\r",
									"pm.variables.set(\"dynamicEndpoint\", \"/\" + substitutedEndpoint);\r",
									"\r",
									"// Auth token logic\r",
									"let authType = pm.iterationData.get(\"authType\") || \"No Auth\";\r",
									"if (authType === \"Dietician Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.environment.get(\"dieticianToken\")\r",
									"    });\r",
									"} else if (authType === \"Admin Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.environment.get(\"adminToken\")\r",
									"    });\r",
									"} else if (authType === \"Expired Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.environment.get(\"expiredToken\")\r",
									"    });\r",
									"} else if (authType === \"No Auth\") {\r",
									"    pm.request.headers.remove(\"Authorization\");\r",
									"}\r",
									"\r",
									"\r",
									"// Define the raw endpoint\r",
									"let rawEndpoint = \"patient/testReports/viewFile/{{fileId}}\";\r",
									"\r",
									"// Replace {{fileId}} with the value from environment or globals\r",
									"let substitutedEndpoint = pm.variables.replaceIn(rawEndpoint).trim();\r",
									"\r",
									"// Clean leading slashes and set dynamicEndpoint\r",
									"substitutedEndpoint = substitutedEndpoint.replace(/^\\/+/, \"\");\r",
									"pm.variables.set(\"dynamicEndpoint\", \"/\" + substitutedEndpoint);\r",
									"\r",
									"// Optional: Set Authorization\r",
									"let token = pm.environment.get(\"dieticianToken\");\r",
									"if (token) {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + token\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"// / 🌐 Set HTTP Method\r",
									"// let method = pm.iterationData.get(\"method\");\r",
									"// if (method) {\r",
									"//     pm.request.method = method.toUpperCase();\r",
									"// }\r",
									"\r",
									"// 🔗 Substitute variables inside endpoint string (e.g., {{fileId}}, {{patientId}})\r",
									"//let rawEndpoint = pm.iterationData.get(\"endpoint\") || \"/\";\r",
									"let rawEndpoint = \"patient/testReports/viewFile/{{fileId}}\"; \r",
									"let substitutedEndpoint = pm.environment.substitute(rawEndpoint).trim();\r",
									"\r",
									"substitutedEndpoint = substitutedEndpoint.replace(/^\\/+/, \"\"); // remove leading slash if any\r",
									"pm.variables.set(\"dynamicEndpoint\", \"/\" + substitutedEndpoint); \r",
									"\r",
									"// // 🧼 Normalize endpoint to prevent double slashes\r",
									"// let baseUrl = pm.environment.get(\"base_url\") || \"\";\r",
									"// baseUrl = baseUrl.replace(/\\/+$/, \"\"); // remove trailing slashes\r",
									"// substitutedEndpoint = substitutedEndpoint.replace(/^\\/+/, \"\"); // remove leading slashes\r",
									"\r",
									"// // 📌 Save to dynamicEndpoint variable for request URL\r",
									"// pm.variables.set(\"dynamicEndpoint\", \"/\" + substitutedEndpoint);\r",
									"\r",
									"// // 🔐 Handle Authentication\r",
									"// let authType = pm.iterationData.get(\"authType\") || \"No Auth\";\r",
									"\r",
									"// if (authType === \"Dietician Token\") {\r",
									"//     pm.request.headers.upsert({\r",
									"//         key: \"Authorization\",\r",
									"//         value: \"Bearer \" + pm.environment.get(\"dieticianToken\")\r",
									"//     });\r",
									"// } else if (authType === \"Admin Token\") {\r",
									"//     pm.request.headers.upsert({\r",
									"//         key: \"Authorization\",\r",
									"//         value: \"Bearer \" + pm.environment.get(\"adminToken\")\r",
									"//     });\r",
									"// } else if (authType === \"Expired Token\") {\r",
									"//     pm.request.headers.upsert({\r",
									"//         key: \"Authorization\",\r",
									"//         value: \"Bearer \" + pm.environment.get(\"expiredToken\")\r",
									"//     });\r",
									"// } else if (authType === \"No Auth\") {\r",
									"//     if (pm.request.headers.has(\"Authorization\")) {\r",
									"//         pm.request.headers.remove(\"Authorization\");\r",
									"//     }\r",
									"// }\r",
									"\r",
									"// // 🪵 Debug Logs\r",
									"// console.log(\"🧪 Scenario:\", pm.iterationData.get(\"scenario\"));\r",
									"// console.log(\"📮 Method:\", pm.request.method);\r",
									"// console.log(\"🔐 Auth Type:\", authType);\r",
									"// console.log(\"🧾 Raw Endpoint from data file:\", rawEndpoint);\r",
									"// console.log(\"📁 Substituted Endpoint:\", substitutedEndpoint);\r",
									"// console.log(\"📌 base_url:\", baseUrl);\r",
									"// console.log(\"🌐 Final Full URL:\", baseUrl + \"/\" + substitutedEndpoint);\r",
									"// console.log(\"📂 fileId:\", pm.environment.get(\"fileId\"));\r",
									"// console.log(\"👤 patientId:\", pm.environment.get(\"patientId\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8788ce0c-25a0-4635-9049-01e1a5e5b347",
								"exec": [
									"pm.test(\"Status code matches expected\", function () {",
									"    pm.response.to.have.status(pm.iterationData.get(\"statusCode\"));",
									"});",
									"",
									"pm.test(\"Status text matches expected\", function () {",
									"    pm.expect(pm.response.status).to.eql(pm.iterationData.get(\"statusText\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c8939cfc-ef59-48be-86d1-8e6b45f0345a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{dieticianToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}{{dynamicEndpoint}}"
					},
					"response": []
				},
				{
					"name": "Delete Patient by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7d11508-63cd-479f-81d0-a88e0b12d0f4",
								"exec": [
									"pm.test(\"Status code matches expected\", function () {",
									"    pm.response.to.have.status(pm.iterationData.get(\"statusCode\"));",
									"});",
									"",
									"pm.test(\"Status text matches expected\", function () {",
									"    pm.expect(pm.response.status).to.eql(pm.iterationData.get(\"statusText\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "767c1033-94e8-4d1c-bbb4-c4e7cdb9829d",
								"exec": [
									"// Set HTTP method dynamically\r",
									"let method = pm.iterationData.get(\"method\");\r",
									"if (method) pm.request.method = method.toUpperCase();\r",
									"\r",
									"// Get and substitute dynamic endpoint from JSON data\r",
									"let rawEndpoint = pm.iterationData.get(\"endpoint\") || \"/\";\r",
									"let substitutedEndpoint = pm.variables.replaceIn(rawEndpoint).trim();\r",
									"substitutedEndpoint = substitutedEndpoint.replace(/^\\/+/, \"\"); // clean leading slashes\r",
									"pm.variables.set(\"dynamicEndpoint\", \"/\" + substitutedEndpoint);\r",
									"\r",
									"// Handle Authorization by role\r",
									"let authType = pm.iterationData.get(\"authType\") || \"No Auth\";\r",
									"\r",
									"if (authType === \"Dietician Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.environment.get(\"dieticianToken\")\r",
									"    });\r",
									"} else if (authType === \"Admin Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.environment.get(\"adminToken\")\r",
									"    });\r",
									"} else if (authType === \"Expired Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.environment.get(\"expiredToken\")\r",
									"    });\r",
									"} else if (authType === \"No Auth\") {\r",
									"    pm.request.headers.remove(\"Authorization\");\r",
									"}\r",
									"\r",
									"// Log for debugging\r",
									"console.log(\"Scenario:\", pm.iterationData.get(\"scenario\"));\r",
									"console.log(\"Method:\", method);\r",
									"console.log(\"Auth Type:\", authType);\r",
									"console.log(\"Final Endpoint:\", substitutedEndpoint);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "5a315b77-290f-47ec-82b8-847af12d4cda",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{dieticianToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}{{dynamicEndpoint}}"
					},
					"response": []
				}
			],
			"id": "3756d598-3916-41fb-a02a-8e2e7f6946cd"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "d1e5c5cb-ed93-4946-835c-9899fdb519f0",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"const loginUrl = pm.environment.get(\"base_url\") + \"/dietician/login\";\r",
					"const adminEmail = pm.environment.get(\"adminEmail\");\r",
					"const adminPassword = pm.environment.get(\"adminPassword\");\r",
					"\r",
					"if (!pm.environment.get(\"adminToken\")) {\r",
					"    console.log(\"🔐 Logging in to get Admin Token...\");\r",
					"\r",
					"    pm.sendRequest({\r",
					"        url: loginUrl,\r",
					"        method: \"POST\",\r",
					"        header: { \"Content-Type\": \"application/json\" },\r",
					"        body: {\r",
					"            mode: \"raw\",\r",
					"            raw: JSON.stringify({\r",
					"                userLoginEmail: adminEmail,\r",
					"                password: adminPassword\r",
					"            })\r",
					"        }\r",
					"    }, function (err, res) {\r",
					"        if (err) {\r",
					"            console.error(\"❌ Login failed:\", err);\r",
					"        } else {\r",
					"            const jsonData = res.json();\r",
					"            const token = jsonData.token;\r",
					"\r",
					"            if (token) {\r",
					"                pm.environment.set(\"adminToken\", token);\r",
					"                console.log(\"✅ Admin token saved to environment.\");\r",
					"            } else {\r",
					"                console.error(\"❌ Token not found in login response:\", jsonData);\r",
					"            }\r",
					"        }\r",
					"    });\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "c66d0e72-74a9-4317-8bfe-d22ca80fbdc5",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}