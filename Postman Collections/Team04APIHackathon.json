{
	"info": {
		"_postman_id": "0236d80b-87af-455d-80e1-b189b61bb212",
		"name": "Dietician _API_Team4",
		"description": "Complete automated flow with Admin login, Dietician creation/login, Patient creation, Reports upload, and test cases.",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Dietician Module",
			"item": [],
			"id": "9037f836-8ad6-47ba-800a-f4de84b3b7ee"
		},
		{
			"name": "Setup",
			"item": [
				{
					"name": "Generate Dietician token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var json = pm.response.json();",
									"pm.environment.set('dieticianEmail', json.Email);",
									"pm.environment.set('dieticianPassword', json.loginPassword);",
									"pm.environment.set('dieticianId', json.id);",
									"console.log('Dietician created. Email: ' + json.Email + ', Password: ' + json.loginPassword + ', dieticianId: ' + json.id);",
									"",
									"// ✅ Status code check",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "26bb88c0-5e32-4e0e-8eec-efebbe9a1a1c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random 10-digit Contact Number\r",
									"const randomContact = \"1\" + Math.floor(100000000 + Math.random() * 900000000);\r",
									"pm.variables.set(\"ContactNumber\", randomContact);\r",
									"\r",
									"// Generate random email\r",
									"const emailPrefix = \"dietician\" + Math.floor(Math.random() * 10000);\r",
									"pm.variables.set(\"Email\", emailPrefix + \"@example.com\");\r",
									"\r",
									"// Generate random DOB between 1980 and 1995\r",
									"function getRandomDOB() {\r",
									"    const start = new Date(1980, 0, 1);\r",
									"    const end = new Date(1995, 11, 31);\r",
									"    const dob = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    return dob.toISOString();\r",
									"}\r",
									"pm.variables.set(\"DateOfBirth\", getRandomDOB());"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "8f74a299-23dc-4b78-b6dc-8cf921c3c9ec"
							}
						}
					],
					"id": "9e33354c-263c-4a1b-89d3-f4d221ac253d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Education\": \"MBBS\",\n  \"Email\": \"{{Email}}\",\n  \"Firstname\": \"John\",\n  \"HospitalCity\": \"CityName\",\n  \"HospitalName\": \"HospitalName\",\n  \"HospitalPincode\": \"123456\",\n  \"HospitalStreet\": \"StreetName\",\n  \"Lastname\": \"Doe\"\n}"
						},
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician"
					},
					"response": []
				},
				{
					"name": "Dietician Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ✅ Status code check",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let json = pm.response.json();",
									"pm.environment.set(\"dieticianToken\", json.token);"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "7590bdce-6b1c-4e95-9bb0-2aed7a49fde9"
							}
						}
					],
					"id": "e557f78c-37ad-41fd-8988-f77e061804fa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{adminToken}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userLoginEmail\": \"{{dieticianEmail}}\",\n  \"password\": \"{{dieticianPassword}}\"\n}\n\n// ✅ Status code check\npm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});"
						},
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login"
					},
					"response": []
				}
			],
			"id": "d9ade4ce-f9e9-4847-a481-c0d2dd1ca4ec"
		},
		{
			"name": "Patient Module",
			"item": [
				{
					"name": "Create Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assuming patientId comes in response",
									"var json = pm.response.json();",
									"if (json.patientId) {",
									"    pm.environment.set('patientId', json.patientId);",
									"    console.log('Patient created with ID: ' + json.patientId);",
									"} else {",
									"    console.log('Patient ID not found in response');",
									"}",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "ee4dbaf4-875b-4779-8ebd-1852c0060aae"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random Contact Number starting with 2\r",
									"const contactNumber = \"2\" + Math.floor(100000000 + Math.random() * 900000000);\r",
									"pm.environment.set(\"PatientContactNumber\", contactNumber);\r",
									"\r",
									"// Generate unique email\r",
									"const emailPrefix = \"jane\" + Math.floor(Math.random() * 10000);\r",
									"pm.environment.set(\"PatientEmail\", `${emailPrefix}@example.com`);\r",
									"\r",
									"// Generate random DOB between 1985 and 2002\r",
									"function getRandomDOB() {\r",
									"    const start = new Date(1985, 0, 1);\r",
									"    const end = new Date(2002, 11, 31);\r",
									"    const dob = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    return dob.toISOString().split('T')[0];\r",
									"}\r",
									"pm.environment.set(\"PatientDOB\", getRandomDOB());"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "58f8276e-88b6-47cf-a5fd-8e3a4258be11"
							}
						}
					],
					"id": "3a7a8f18-e01b-4cbc-9ed9-7282af7e7bbb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{dieticianToken}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{dieticianToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{\n  \"FirstName\": \"Jaane\",\n  \"LastName\": \"Smith\",\n  \"ContactNumber\": \"{{PatientContactNumber}}\",\n  \"Email\": \"{{PatientEmail}}\",\n  \"Allergy\": \"NONE\",\n  \"FoodPreference\": \"Vegetarian\",\n  \"CuisineCategory\": \"Indian\",\n  \"DateOfBirth\": \"{{PatientDOB}}\"\n}",
									"type": "text"
								},
								{
									"key": "file",
									"value": "",
									"type": "file"
								}
							]
						},
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient"
					},
					"response": []
				},
				{
					"name": "Add New Reports",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ✅ Status code check",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// ✅ Schema validation (example - adjust per endpoint)",
									"const schema = {",
									"  type: \"object\",",
									"  properties: {",
									"    token: { type: \"string\" },",
									"    userId: { type: \"string\" },",
									"    email: { type: \"string\" }",
									"  },",
									"  required: [\"token\", \"userId\", \"email\"]",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"  pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "b0321dd6-c1dc-41c0-a632-a8c71b3e5198"
							}
						}
					],
					"id": "16614059-d800-4c62-861c-492c5e882686",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{dieticianToken}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{dieticianToken}}"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{\n  \"FirstName\": \"Jane\",\n  \"LastName\": \"Smith\",\n  \"ContactNumber\": \"9916543210\",\n  \"Email\": \"jane.smiiith319@example.com\",\n  \"Allergy\": \"NONE\",\n  \"FoodPreference\": \"Vegetarian\",\n  \"CuisineCategory\": \"Indian\",\n  \"DateOfBirth\": \"1993-05-20\"\n}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Users/chand/Downloads/Sample reports-20250523T164632Z-1-001 (1)/Sample reports/HyperThyroid_Report_final.pdf"
								},
								{
									"key": "vitals",
									"value": "{\n  \"Weight\": 70.0,\n  \"Height\": 170.0,\n  \"Temperature\": 36.5,\n  \"SP\": 120,\n  \"DP\": 80\n}",
									"type": "text"
								}
							]
						},
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient/newReports/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "Get Patient Morbidity Details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const reqname = pm.iterationData.get(\"Reqname\");\r",
									"const myRequestName = \"Get Patient Morbidity Details\"; // 👈 Set manually per request\r",
									"\r",
									"// Mark whether this request should execute\r",
									"pm.variables.set(\"shouldRun\", reqname === myRequestName);\r",
									"\r",
									"// Set the HTTP method from data file\r",
									"let method = pm.iterationData.get(\"method\");\r",
									"if (method) pm.request.method = method.toUpperCase();\r",
									"\r",
									"// Replace environment variables inside the endpoint string\r",
									"let rawEndpoint = pm.iterationData.get(\"endpoint\") || \"/\";\r",
									"let substitutedEndpoint = pm.variables.replaceIn(rawEndpoint).trim();\r",
									"\r",
									"// Normalize slashes and set for dynamic use\r",
									"substitutedEndpoint = substitutedEndpoint.replace(/^\\/+/, \"\");\r",
									"pm.variables.set(\"dynamicEndpoint\", \"/\" + substitutedEndpoint);\r",
									"\r",
									"// Auth token logic\r",
									"let authType = pm.iterationData.get(\"authType\") || \"No Auth\";\r",
									"if (authType === \"Dietician Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.environment.get(\"dieticianToken\")\r",
									"    });\r",
									"} else if (authType === \"Admin Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.environment.get(\"adminToken\")\r",
									"    });\r",
									"} else if (authType === \"Expired Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.environment.get(\"expiredToken\")\r",
									"    });\r",
									"} else if (authType === \"No Auth\") {\r",
									"    pm.request.headers.remove(\"Authorization\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "3ec4ea33-28bf-40c6-95ca-4686c6d2276f"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const expectedStatus = parseInt(pm.iterationData.get(\"statusCode\"));",
									"const expectedStatusText = pm.iterationData.get(\"statusText\");",
									"",
									"pm.test(\"✔️ Status Code matches\", function () {",
									"    pm.response.to.have.status(expectedStatus);",
									"});",
									"",
									"pm.test(\"✔️ Status Text matches\", function () {",
									"    pm.expect(pm.response.status).to.eql(expectedStatusText);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "8cdc748b-e3f2-497c-bfb6-33f6862142ed"
							}
						}
					],
					"id": "84e92011-f67c-4bee-a4ea-235d527e1d9d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{dieticianToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}{{dynamicEndpoint}}"
					},
					"response": []
				},
				{
					"name": "Retrieve Patient File by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const reqname = pm.iterationData.get(\"Reqname\");\r",
									"const myRequestName = \"Retrieve Patient File by ID\"; // 👈 Set manually per request\r",
									"\r",
									"// Mark whether this request should execute\r",
									"pm.variables.set(\"shouldRun\", reqname === myRequestName);\r",
									"\r",
									"// ✅ Set the HTTP method from data file\r",
									"let method = pm.iterationData.get(\"method\");\r",
									"if (method) {\r",
									"    pm.request.method = method.toUpperCase();\r",
									"}\r",
									"\r",
									"// ✅ Get the endpoint and replace any {{placeholders}} from environment or globals\r",
									"let rawEndpoint = pm.iterationData.get(\"endpoint\") || \"/\";\r",
									"let substitutedEndpoint = pm.variables.replaceIn(rawEndpoint).trim();\r",
									"\r",
									"// ✅ Clean up leading slashes to avoid duplication\r",
									"substitutedEndpoint = substitutedEndpoint.replace(/^\\/+/, \"\");\r",
									"\r",
									"// ✅ Set as dynamicEndpoint variable\r",
									"pm.variables.set(\"dynamicEndpoint\", \"/\" + substitutedEndpoint);\r",
									"\r",
									"// ✅ Handle Authorization header based on authType from JSON\r",
									"let authType = pm.iterationData.get(\"authType\") || \"No Auth\";\r",
									"\r",
									"if (authType === \"Dietician Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.environment.get(\"dieticianToken\")\r",
									"    });\r",
									"} else if (authType === \"Admin Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.environment.get(\"adminToken\")\r",
									"    });\r",
									"} else if (authType === \"Expired Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.environment.get(\"expiredToken\")\r",
									"    });\r",
									"} else if (authType === \"No Auth\") {\r",
									"    // Remove Authorization header completely\r",
									"    pm.request.headers.remove(\"Authorization\");\r",
									"}\r",
									"\r",
									"// ✅ Debug logs (optional)\r",
									"console.log(\"🔄 Request method:\", method);\r",
									"console.log(\"🔗 Raw endpoint:\", rawEndpoint);\r",
									"console.log(\"🔁 Final dynamic endpoint:\", pm.variables.get(\"dynamicEndpoint\"));\r",
									"console.log(\"🔐 Auth Type:\", authType);"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "29956cf0-d89d-4ee8-a3ee-ef0f41cd5e3a"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const expectedStatus = parseInt(pm.iterationData.get(\"statusCode\"));",
									"const expectedStatusText = pm.iterationData.get(\"statusText\");",
									"",
									"pm.test(\"✔️ Status Code matches\", function () {",
									"    pm.response.to.have.status(expectedStatus);",
									"});",
									"",
									"pm.test(\"✔️ Status Text matches\", function () {",
									"    pm.expect(pm.response.status).to.eql(expectedStatusText);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "0c971508-5e0c-4b30-b736-3d05fc1ed300"
							}
						}
					],
					"id": "aadac4c8-16e7-46b2-84f6-7c03d48a257f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{dieticianToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}{{dynamicEndpoint}}"
					},
					"response": []
				},
				{
					"name": "Delete Patient by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const expectedStatus = parseInt(pm.iterationData.get(\"statusCode\"));",
									"const expectedStatusText = pm.iterationData.get(\"statusText\");",
									"",
									"pm.test(\"✔️ Status Code matches\", function () {",
									"    pm.response.to.have.status(expectedStatus);",
									"});",
									"",
									"pm.test(\"✔️ Status Text matches\", function () {",
									"    pm.expect(pm.response.status).to.eql(expectedStatusText);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "df7faa82-642d-4aaf-a301-33762a4badfb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const reqname = pm.iterationData.get(\"Reqname\");\r",
									"const myRequestName = \"Delete Patient by ID\"; // 👈 Set manually per request\r",
									"\r",
									"// Mark whether this request should execute\r",
									"pm.variables.set(\"shouldRun\", reqname === myRequestName);\r",
									"\r",
									"// Set HTTP method dynamically\r",
									"let method = pm.iterationData.get(\"method\");\r",
									"if (method) pm.request.method = method.toUpperCase();\r",
									"\r",
									"// Get and substitute dynamic endpoint from JSON data\r",
									"let rawEndpoint = pm.iterationData.get(\"endpoint\") || \"/\";\r",
									"let substitutedEndpoint = pm.variables.replaceIn(rawEndpoint).trim();\r",
									"substitutedEndpoint = substitutedEndpoint.replace(/^\\/+/, \"\"); // clean leading slashes\r",
									"pm.variables.set(\"dynamicEndpoint\", \"/\" + substitutedEndpoint);\r",
									"\r",
									"// Handle Authorization by role\r",
									"let authType = pm.iterationData.get(\"authType\") || \"No Auth\";\r",
									"\r",
									"if (authType === \"Dietician Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.environment.get(\"dieticianToken\")\r",
									"    });\r",
									"} else if (authType === \"Admin Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.environment.get(\"adminToken\")\r",
									"    });\r",
									"} else if (authType === \"Expired Token\") {\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + pm.environment.get(\"expiredToken\")\r",
									"    });\r",
									"} else if (authType === \"No Auth\") {\r",
									"    pm.request.headers.remove(\"Authorization\");\r",
									"}\r",
									"\r",
									"// Log for debugging\r",
									"console.log(\"Scenario:\", pm.iterationData.get(\"scenario\"));\r",
									"console.log(\"Method:\", method);\r",
									"console.log(\"Auth Type:\", authType);\r",
									"console.log(\"Final Endpoint:\", substitutedEndpoint);"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "7e40c849-b4cf-42c0-9214-97f5ffc8d9d0"
							}
						}
					],
					"id": "3d5c1a23-9ea4-4a93-8a06-af2f752668f5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{dieticianToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}{{dynamicEndpoint}}"
					},
					"response": []
				}
			],
			"id": "3756d598-3916-41fb-a02a-8e2e7f6946cd"
		},
		{
			"name": "Balauma_GetDieticianById",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Admin Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "33efd9f1-01f8-4c5f-88af-70305b3eb3bf",
										"exec": [
											"// ✅ Status code check",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// ✅ Schema validation (example - adjust per endpoint)",
											"const schema = {",
											"  type: \"object\",",
											"  properties: {",
											"    token: { type: \"string\" },",
											"    userId: { type: \"integer\" },",
											"    email: { type: \"string\" }",
											"  },",
											"  required: [\"token\", \"userId\", \"loginUserEmail\"]",
											"};",
											"pm.test(\"Schema is valid\", function () {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"let json = pm.response.json();",
											"pm.environment.set(\"admin_token\", json.token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "909963db-96a4-4bec-9249-05a3c38dc16d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userLoginEmail\": \"Team404@gmail.com\",\n  \"password\": \"test\"\n}"
								},
								"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login"
							},
							"response": []
						},
						{
							"name": "Dietician Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c050e7c5-76e2-4b15-8d81-73c450cf7d87",
										"exec": [
											"// ✅ Status code check",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// ✅ Schema validation (example - adjust per endpoint)",
											"const schema = {",
											"  type: \"object\",",
											"  properties: {",
											"    token: { type: \"string\" },",
											"    userId: { type: \"integer\" },",
											"    email: { type: \"string\" }",
											"  },",
											"  required: [\"token\", \"userId\", \"loginUserEmail\"]",
											"};",
											"pm.test(\"Schema is valid\", function () {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"let json = pm.response.json();",
											"pm.environment.set(\"dieticianToken\", json.token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "cd0d64c5-9523-4caf-a923-b13661352837",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userLoginEmail\": \"dietician.ashaa@example.com\",\n  \"password\": \"Acadia42\"\n}"
								},
								"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login"
							},
							"response": []
						}
					],
					"id": "277fba1f-10ce-442a-9698-c64971e622a6"
				},
				{
					"name": "GetDieticianUsingAdminRole",
					"item": [
						{
							"name": "TC01_DieticianById_ValidToken",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f43cc9b8-3f94-49e3-b21b-4f46eac1b2c7",
										"exec": [
											"// Set dietician id variable from Json\r",
											"let id = pm.iterationData.get(\"dieticianId\");\r",
											"console.log(\"Processing GET dietician id endpoint using :: \" + id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1130ba88-8de1-46c5-b50a-6d3d000dbfc2",
										"exec": [
											"console.log(pm.iterationData.get(\"scenarioName\"));\r",
											"console.log(\"Expected Status Code :: \" + pm.iterationData.get(\"responseCode\"));\r",
											"\r",
											"pm.test(\"Validate status code\", function () {\r",
											"    pm.response.to.have.status(pm.iterationData.get(\"responseCode\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response body matches expected JSON\", function () {\r",
											"    let responseBody = pm.response.json();\r",
											"    let expectedResponseBody = pm.iterationData.get(\"expectedResponseBody\");\r",
											"    if (responseBody.hasOwnProperty(\"timestamp\")){\r",
											"        responseBody.timestamp = \"\";\r",
											"    }\r",
											"    pm.expect(responseBody).to.eql(expectedResponseBody);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "22b1f966-0716-49fd-905b-e9bbbad9563d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{admin_token}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_url}}/dietician/{{dieticianId}}"
							},
							"response": []
						},
						{
							"name": "TC04_DieticianById_InvalidMethod",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f43cc9b8-3f94-49e3-b21b-4f46eac1b2c7",
										"exec": [
											"// Set dietician id variable from Json\r",
											"let id = pm.iterationData.get(\"dieticianId\");\r",
											"console.log(\"Processing GET dietician id endpoint using :: \" + id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1130ba88-8de1-46c5-b50a-6d3d000dbfc2",
										"exec": [
											"pm.test(\"Validate status code\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "f96af19d-3c4a-48d8-90b1-17d27130e462",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{admin_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_url}}/dietician/{{dieticianId}}"
							},
							"response": []
						},
						{
							"name": "TC02_DieticianById_NoAuth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f43cc9b8-3f94-49e3-b21b-4f46eac1b2c7",
										"exec": [
											"// Set dietician id variable from Json\r",
											"let id = pm.iterationData.get(\"dieticianId\");\r",
											"console.log(\"Processing GET dietician id endpoint using :: \" + id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1130ba88-8de1-46c5-b50a-6d3d000dbfc2",
										"exec": [
											"pm.test(\"Validate status code\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "083c6893-aded-446d-a304-965f4ff242c6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_url}}/dietician/{{dieticianId}}"
							},
							"response": []
						},
						{
							"name": "TC03_DieticianById_InvalidToken",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f43cc9b8-3f94-49e3-b21b-4f46eac1b2c7",
										"exec": [
											"// Set dietician id variable from Json\r",
											"let id = pm.iterationData.get(\"dieticianId\");\r",
											"console.log(\"Processing GET dietician id endpoint using :: \" + id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1130ba88-8de1-46c5-b50a-6d3d000dbfc2",
										"exec": [
											"pm.test(\"Validate status code\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "7383235d-553c-4c5e-a061-6c4e8d042b90",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "test"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_url}}/dietician/{{dieticianId}}"
							},
							"response": []
						}
					],
					"id": "fdf1a354-a585-4ece-9818-f96ed22e5dbb"
				},
				{
					"name": "GetDieticianUsingDieticianRole",
					"item": [],
					"id": "0a84815d-0a1f-47a8-98bc-f512bc207d3d"
				},
				{
					"name": "GetAllDieticianUsingDieticianRole",
					"item": [
						{
							"name": "TC01_GET_AllDieticians",
							"id": "d4054abf-7128-497f-b786-2be419c5be0a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{dieticianToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician"
							},
							"response": []
						}
					],
					"id": "f8a7f2cc-5bd0-49a6-bb50-1c18d2e63428"
				}
			],
			"id": "a37ff4db-b0fd-4496-955f-d4509667ee0d"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "00fa670e-07b6-4abd-97a9-5bcb92d3c24e",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"const loginUrl = pm.collectionVariables.get(\"base_url\") + \"/dietician/login\";\r",
					"const adminEmail = pm.collectionVariables.get(\"adminEmail\");\r",
					"const adminPassword = pm.collectionVariables.get(\"adminPassword\");\r",
					"\r",
					"if (!pm.collectionVariables.get(\"adminToken\")) {\r",
					"    console.log(\"🔐 Logging in to get Admin Token...\");\r",
					"\r",
					"    pm.sendRequest({\r",
					"        url: loginUrl,\r",
					"        method: \"POST\",\r",
					"        header: { \"Content-Type\": \"application/json\" },\r",
					"        body: {\r",
					"            mode: \"raw\",\r",
					"            raw: JSON.stringify({\r",
					"                userLoginEmail: adminEmail,\r",
					"                password: adminPassword\r",
					"            })\r",
					"        }\r",
					"    }, function (err, res) {\r",
					"        if (err) {\r",
					"            console.error(\"❌ Login failed:\", err);\r",
					"        } else {\r",
					"            const jsonData = res.json();\r",
					"            const token = jsonData.token;\r",
					"\r",
					"            if (token) {\r",
					"                pm.collectionVariables.set(\"adminToken\", token);\r",
					"                console.log(\"✅ Admin token saved to collection variables.\");\r",
					"            } else {\r",
					"                console.error(\"❌ Token not found in login response:\", jsonData);\r",
					"            }\r",
					"        }\r",
					"    });\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f061a534-cfe3-44d0-bb8b-0fa3b6554c1c",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "adminEmail",
			"value": "Team404@gmail.com",
			"type": "string"
		},
		{
			"key": "adminPassword",
			"value": "test",
			"type": "string"
		},
		{
			"key": "adminToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "expiredToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "base_url",
			"value": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician",
			"type": "string"
		},
		{
			"key": "dieticianEmail",
			"value": "",
			"type": "string"
		},
		{
			"key": "dieticianId",
			"value": "",
			"type": "string"
		},
		{
			"key": "dieticianPassword",
			"value": "",
			"type": "string"
		}
	]
}